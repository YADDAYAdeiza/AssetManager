<div class = "profileCreatedMsgDivCont">
   <h1>
       <p class = 'profileCreatedMsg'>Profile succesfully created!</p>
   </h1>
</div>

<div class="user-show-div">
        
    <div>
        <h2><%=user.firstName%></h2>
<p><img width="120" height= "auto" src="<%= user.userProfilePic%>"></p>

<a href="/user/<%=user.id%>/edit">Edit</a> |
<!-- change this href to the populated version of user -->
<a href="/user/<%=user.id%>/edit">View Asset</a> |


<%-include('_userContent', {btnVal:`Asset Pool`})%>
<a href="/user/history/<%=user.id%>">History</a>
<%-include('../partials/deleteForm', {url:`/user/${user.id}`})%>
<form id = 'updateForm' method="POST" >
    <button class = 'btn btn-delete' type="submit">Update</button>
</form>

<div class="user-assetsOwn-div">Own Assets
    
    <% ownAssets.forEach(asset=>{ %>
        <div class="divContLi" onclick = 'triggerClickCheckbox(this)' data-asset-id="<%=asset.id%>">
            <li><input type="checkbox" class = 'user-asset-pool-checkbox' style="display:inline; width:10%"><a href="/asset/<%=asset.id%>"><%=asset.assetCode%></a></li>
        </div>
        <%})%>
        
    </div>
    <button onclick = "userAssetDeassign(this, 'user-assetsOwn-div', 'updateFormOwn')">DeAssign</button>
    <%-include('_userContent', {btnVal:`Asset Pool`})%> 
    <form id = 'updateFormOwn' method="POST" >
        <button class = 'btn btn-delete' type="submit">Update</button>
    </form>
    <div class="user-assetsRequested-div">Requisition
        <select id = 'select-requisition'size="10" multiple="true">
           <%assetTypeAll.forEach(arrItem=>{%>
            <option value="<%=arrItem%>"  onclick = "resetSelToOne()"><%=arrItem.assetTypeClass%></option>
                <% });%>
        </select>
        <p>Requisitioned Assets:</p>
        <div class="assets-requisitioned-div"></div>
        Qty(Change last): <input type="number" min="1" id = 'qtyRequisitionInpt' value = '1'>
        <button onclick="addRequisition()">Add Asset</button>
        <button onclick="resetRequisition()">Reset</button>
        <button onclick="requisitionHistory()">Requisition History</button>
       

        
        <div>
            <ul id = 'ulRequisition'></ul>
        </div>
        <form id = 'updateFormRequistion' method="POST" >
            <button class = 'btn btn-delete' type="submit">Update</button>
        </form>
            updateFormRequistionGrab.action = `/user/requisition/${JSON.stringify(objRequisition)}?_method=PUT&userId=${userID}&assignment=Requisition`;
            <form id = 'approveFormRequistion' method="POST" onsubmit="return approveRequisition(this)">
            <button class = 'btn btn-delete' type="submit">Directorate Approval</button>
        </form>
    </form>
    <form id = 'approveFormRequistion2' method="POST" onsubmit="return approveRequisition(this)">
    <button class = 'btn btn-delete' type="submit">Store Approval</button>
</form>
    </div>
    <a href="/user/requisitionApproval/<%=user._id%>" onclick="return approveRequisition()">Approve</a>
    
    
    
<!-- <div><button id = 'done-btn' disabled='false'>Done</button></div> -->

<%if (assetsByUser.length >0){%>
    <h2>Assets of User</h2>
    <%- include('../partials/userGrid.ejs', {asset:assetsByUser, large:true})%>;
        <%}%>
    </div>

    <div id = "assetList" class="assetList">
        <!-- create buttons -->
        <button class="tablinks" onclick="openCity(event, 'London')">Tables</button>
        <button class="tablinks" onclick="openCity(event, 'Paris')">Chairs</button>
        <button class="tablinks" onclick="openCity(event, 'Tokyo')">Televisions</button>
        

        <%var assetObject={};%>
        <%var assetClassObject={};%>
        
        <!-- creating the select -->
        <select name="" id="selAssetOption" onchange = "openCity(event, 'London')">
            <%allAssetType.forEach(assetType=>{%>
            <option value="<%=assetType.assetTypeClass%>"><%=assetType.assetTypeClass%></option>
            <%assetObject[assetType._id.toString()] = [];%>
            <%assetClassObject[assetType._id.toString()] = assetType.assetTypeClass;%>
            <%})%>
        </select>
        

        <% allAssets.forEach(asset=>{ %>
            <%assetObject[asset.assetType.toString()].push(asset)%>
        <%})%>
        <%console.log('&&&&&&');%>
        <%console.log(assetObject)%>
        <!-- creating the ul and li -->
        <ul class="user-asset-pool">
            <%Object.keys(assetObject).forEach(assetTypeIdProperty=>{%>
                <div  id="<%=assetClassObject[assetTypeIdProperty]%>" class="tabcontent">
                    <h3><%=assetClassObject[assetTypeIdProperty]%></h3>
                    <p><%=assetClassObject[assetTypeIdProperty]%> is the capital city of England.</p>
                    <% assetObject[assetTypeIdProperty].forEach(asset=>{%>
                        <%console.log("[[[[[[[[[[[[[[[[[[[[[[" +assetObject[assetTypeIdProperty]);%>
                    <div class="divContLi" onclick = "triggerClickCheckbox(this)" data-asset-id="<%=asset.id%>">
                        <li><input type="checkbox" class = "user-asset-pool-checkbox" style="display:inline; width:10%"><a href="/asset/<%=asset.id%>"><%=asset.assetCode%></a></li>
                    </div>
                    <%})%>
                </div>
            <%})%>
                

            
        </ul>
    </div>

    <div class="pending-requisition-approvals">
        <ul>
            <% if (user.userDirectorateApproval.length){%>
                 <span>Something</span>
                <% user.userDirectorateApproval.forEach(item=>{%>
                    <%console.log('******', item._id);%>
                    <li><a href = '/user/<%=item._id%>'><%=item.firstName%></a></li>
                <% })%>
             <%}%>
        </ul>
    </div>

    <p>
        <div class="pending-store-approvals" style="position:relative;">
            <ul>
                <% if (user.userStoreApproval.length){%>
                    <%'Store Approvals here' %> 
                    <%console.log('+++')%>
                    <% console.log(user.userStoreApproval)%>
                    <% user.userStoreApproval.forEach(item=>{%>
                        <%console.log('******', item._id);%>
                        <li><a href = '/user/<%=item._id%>'><%=item.firstName%></a></li>
                    <% })%>
                 <%}%>
            </ul>
            <div id="req-History">
        </div>


        </div>

    </p>
        
    
</div>


<script defer>


      

    let serverUserUserRequisition = '<%- JSON.stringify(user.userRequisition)%>';

   
    let userID = '<%- user.id %>';
    let profileCreatedMsgGrab = document.getElementsByClassName('profileCreatedMsg')[0];
    let idObj = {};
    let updateFormGrab = document.getElementById('updateForm');
    let assetListGrab = document.getElementsByClassName('assetList')[0];
    let userShowDivGrab = document.getElementsByClassName('user-show-div')[0];

    let assignShowButtonGrab = document.getElementsByClassName('assignShowButton')[0];

    let userAssetPoolGrab = document.getElementsByClassName('user-asset-pool')[0];
    let userAssetPoolCheckboxGrab;
    let assetGrab = document.getElementsByClassName('user-assets-div')[0];
    let userAssetsOwnDivGrab = document.getElementsByClassName('user-assetsOwn-div')[0];
    let doneBtnGrab =  document.getElementsByClassName('done-btn')[0];

    var lastAssignmentBtn;
    let updateFormRequistionGrab = document.getElementById('updateFormRequistion');

    let divId = document.getElementById('assets-requisitioned-div');
    let reqHistoryGrab = document.getElementById('req-History');
    let selAssetOptionGrab = document.getElementById('selAssetOption');

    
    // allAsset.forEach(aAsset => {
        //     console.log(aAsset);
        // });
       
//Auth
// assignShowButtonGrab.classList.add(authVar['auth']['assignShowButtonGrab']);

//sorting code, just in case
// const arr = [1,1,2,2,3,4,4,5];
// const extractUnique = arr => {
//    const res = [];
//    for(let i = 0; i < arr.length; i++){
//       if(arr.lastIndexOf(arr[i]) !== arr.indexOf(arr[i])){
//          continue;
//       };
//       res.push(arr[i]);
//    };
//    return res;
// };
// console.log(extractUnique(arr));


function openCity(evt, cityName) {
    // Declare all variables
    var i, tabcontent, tablinks;

    // Get all elements with class="tabcontent" and hide them
    tabcontent = document.getElementsByClassName("tabcontent");
    for (i = 0; i < tabcontent.length; i++) {
        tabcontent[i].style.display = "none";
    }

    // Get all elements with class="tablinks" and remove the class "active"
    // tablinks = document.getElementsByClassName("tablinks");
    // for (i = 0; i < tablinks.length; i++) {
    //     tablinks[i].className = tablinks[i].className.replace(" active", "");
    // }

    // Show the current tab, and add an "active" class to the button that opened the tab
    // console.log(selAssetOptionGrab);
    alert(selAssetOptionGrab.value);
    document.getElementById(selAssetOptionGrab.value).style.display = "block";
    // evt.currentTarget.className += " active";
}


function requisitionHistory(){
    let getRequisitionObj = new XMLHttpRequest();

            getRequisitionObj.onreadystatechange = function (){
                if (getRequisitionObj.readyState == 4 && getRequisitionObj.status == 200){
                    console.log(JSON.parse(getRequisitionObj.response));
                    let reqHistoryObj = JSON.parse(getRequisitionObj.response);
                    reqHistoryObj.forEach(item=>{
                        var pElm = document.createElement('p');
                        pElm.innerHTML = "userRequistion: "+JSON.stringify(item.userRequisition).replace('{', '').replace('}', '');
                        reqHistoryGrab.appendChild(pElm);
                        reqHistoryGrab.classList.add('div-req-out');
                    })
                }
            }

            getRequisitionObj.open("GET", `/user/getHistory/${userID}`, true);
            getRequisitionObj.send();
}
        function showAssetList(){
            userShowDivGrab.classList.toggle('user-show-div3');
            userShowDivGrab.classList.toggle('user-show-div2');
            userAssetPoolCheckboxGrab = document.getElementsByClassName('user-asset-pool-checkbox');
        }
        function userAssetAssign(this2){
            alert(this2.innerHTML);
            lastAssignmentBtn = this2.value;
            console.log(userID)
            var obj = {url:`/user/ls`}
            console.log(obj);
            
            console.log(assetListGrab);
            userAssetPoolCheckboxGrab = assetListGrab.getElementsByClassName('user-asset-pool-checkbox');
            console.log(userAssetPoolCheckboxGrab);
            var trueBoxes =  [...userAssetPoolCheckboxGrab].filter(item=>{
                return item.checked == true;
            })
            console.log(trueBoxes);
            console.log(userAssetPoolGrab);
            trueBoxes.forEach(item=>{
                assetGrab.appendChild(item.parentNode.parentNode); 
            })

            if (assetGrab.children.length){
                doneBtnGrab.classList.toggle('btn-deActivate'); 
            }
            idObj.userId = userID;
            getObjectIds(assetGrab);
            console.log('!!!!!!');
            console.log(idObj);
            updateFormGrab.action = `/user/${JSON.stringify(idObj)}?_method=PUT&assignment=${this2.innerHTML}`;
            console.log(updateFormGrab.action);
       }
    
       function getObjectIds(assetDiv){
        idObj['idArr'] = [];
           let assetDivGrab = assetDiv.getElementsByClassName('divContLi');
           [...assetDivGrab].forEach(divItem=>{
               idObj['idArr'].push(divItem.getAttribute('data-asset-id'));
           })
           console.log(idObj)
       }

    function userAssetDeassign(this2, assetDiv, updateForm){
        console.log(updateForm);
        alert(this2.innerHTML);
        console.log(this2);
        console.log(assetDiv);
        assetGrab = document.getElementsByClassName(assetDiv)[0];
        var inputChecks = assetGrab.getElementsByClassName('user-asset-pool-checkbox');
        var trueBoxes =  [...inputChecks].filter(item=>{
            return item.checked == true;
        })
        console.log(trueBoxes);
        trueBoxes.forEach(item=>{
            userAssetPoolGrab.appendChild(item.parentNode.parentNode); 
        })
        console.log(assetGrab);
        console.log(assetGrab.children.length);
        if (!assetGrab.children.length){
                doneBtnGrab.classList.toggle('btn-deActivate'); 
        }
        idObj.userId = userID;
            getObjectIds(assetGrab);
            console.log('*****')
            console.log(idObj);
            if (updateForm){
                console.log(document.getElementById(updateForm));
                document.getElementById(updateForm).action = `/user/${JSON.stringify(idObj)}?_method=PUT&assignment=${this2.innerHTML}`;
            }
        console.log(updateFormGrab.action);
    }  

    function triggerClickCheckbox(this2){
    console.log(this2);
       var checkGrab = this2.getElementsByTagName('input')[0];
       checkGrab.checked = !checkGrab.checked;
    }

    setTimeout(function(){
            profileCreatedMsgGrab.style.display = 'none';
        }, 3000)

    var assetsRequisitionedDiv;
    var qtyRequisitionInptGrab = document.getElementById('qtyRequisitionInpt');
    var ulRequisitionGrab = document.getElementById('ulRequisition');
    var selectRequisitionGrab;
    var objRequisition = {};
    console.log(serverUserUserRequisition);
    if (serverUserUserRequisition){
        objRequisition = JSON.parse(serverUserUserRequisition);
        addRequisition();
    }

    // objRequisition = {}
    function addRequisition(){
        console.log(objRequisition);
        selectRequisitionGrab = document.getElementById('select-requisition').selectedOptions;
        console.log(selectRequisitionGrab);
        assignUlElement(selectRequisitionGrab, this);
               
        //assetsRequisitionedDiv.appendChild(document.createElement('ul'));
    }

    function assignUlElement(selectRequisitionGrab2, this2){
        [...selectRequisitionGrab2].forEach(selItem=>{
            if (objRequisition[selItem.innerHTML]){
                console.log('Exists');
                objRequisition[selItem.innerHTML] =  +objRequisition[selItem.innerHTML] + parseInt(qtyRequisitionInptGrab.value);
            }else{
                objRequisition[selItem.innerHTML] = +qtyRequisitionInptGrab.value;
            }
            // objRequisition[selItem.innerHTML] = (objRequisition[selItem.innerHTML] != undefined) ? objRequisition[selItem.innerHTML] + qtyRequisitionInptGrab.value: qtyRequisitionInptGrab.value;
        });
        console.log('@@@@@@@@@@@');
        console.log(objRequisition);
        assetsRequisitionedDiv = document.getElementById(divId);
        ulRequisitionGrab.innerHTML = '';
        Object.keys(objRequisition).forEach(arrItem=>{
            var divMiniCont = document.createElement('div');
                divMiniCont.setAttribute('class', 'divMiniLi')
            var liElm = document.createElement('li');
                liElm.setAttribute('class', 'liRequisition');
                liElm.style.display = 'inline'
            var btnPlus = document.createElement('button');
            var btnPlus = document.createElement('button');
                btnPlus.innerHTML = '+';
                btnPlus.onclick = function(){
                    changeObjRequisition(this);
                }
            var btnMinus = document.createElement('button')
                btnMinus.onclick = function(){
                    changeObjRequisition(this);
                }
                btnMinus.innerHTML = '-';
            liElm.innerHTML = arrItem +'('+objRequisition[arrItem]+')';
            divMiniCont.appendChild(btnMinus);
            divMiniCont.appendChild(btnPlus);
            divMiniCont.appendChild(liElm);
            console.log('==============');
            console.log(divMiniCont);
            ulRequisitionGrab.appendChild(divMiniCont);

            
            
            //set FORM action
            console.log('Use in action, ', this2.innerHTML);
            console.log('The String, ', JSON.stringify(objRequisition));
            updateFormRequistionGrab.action = `/user/requisition/${userID}?_method=PUT&userId=${userID}&requisitionApproval=${JSON.stringify(objRequisition)}&assignment=Requisition`;

        })
    }

    function resetRequisition(){
        objRequisition = {};
    }

    function resetSelToOne(){
        qtyRequisitionInptGrab.value = 1;
    }

    function changeObjRequisition(this2){
        qtyRequisitionInptGrab.value = 0;
        if (this2.innerHTML == '+') {
            // alert('Adding');
            var liVal = this2.parentNode.getElementsByTagName('li')[0].innerHTML
            liVal = liVal.slice(0, liVal.indexOf('('));
            objRequisition[liVal] = +(objRequisition[liVal]) + 1;
            console.log(objRequisition);
            assignUlElement(selectRequisitionGrab, this2)
        }
        if (this2.innerHTML == '-') {
            // alert('Subtracting');
            var liVal = this2.parentNode.getElementsByTagName('li')[0].innerHTML
            liVal = liVal.slice(0, liVal.indexOf('('));
            objRequisition[liVal] =  +(objRequisition[liVal]) - 1;
            console.log(objRequisition);
            assignUlElement(selectRequisitionGrab, this2)
        }
    }

    function userHistory(this2, userHistoryDiv){

    }
    let approveRequisitionObj ={}
var objClassList = {}
    function approveRequisition(this2){
        makeObject();
        //ulRequisitionGrab.classList.add('approvedRequisition');
        objClassList['ulRequisitionGrab'] = 'approvedRequisition';
        console.log(this2);
        let requisitionApproval = this2.getElementsByTagName('button')[0].innerHTML;
        if (requisitionApproval == 'Directorate Approval'){
            this2.action = '/user/directorateRequisitionApproval/<%=user.id%>?_method=PUT&userClassList='+ JSON.stringify(objClassList)+`&directorateApproval=${JSON.stringify(approveRequisitionObj)}`+`&assignment=${this2.getElementsByTagName('button')[0].innerHTML}`;
        }
        if (requisitionApproval == 'Store Approval'){
            this2.action = '/user/storeRequisitionApproval/<%=user.id%>?_method=PUT&userClassList='+ JSON.stringify(objClassList)+`&storeApproval=${JSON.stringify(approveRequisitionObj)}`+`&assignment=${this2.getElementsByTagName('button')[0].innerHTML}`;
        }
        return true;
      
    }

    function makeObject(){
        approveRequisitionObj = {};
        alert('Making object');
        var liRequisitionGrab = document.getElementsByClassName('liRequisition');
        console.log(liRequisitionGrab);
        // liRequisitionGrab.forEach(liItem=>{
            // console.log(liItem.innerHTML);
            alert(liRequisitionGrab.length);
            
            for (var a=0; a<liRequisitionGrab.length;a++){
                // alert (liRequisitionGrab[a].innerHTML);
                approveRequisitionObj[(liRequisitionGrab[a].innerHTML).slice(0, (liRequisitionGrab[a].innerHTML).indexOf('('))] = liRequisitionGrab[a].innerHTML.slice((liRequisitionGrab[a].innerHTML).indexOf('(')+1, liRequisitionGrab[a].innerHTML.indexOf(')'));
            }
            console.log(approveRequisitionObj);
             
        //    if (userMan){
        //     alert('Yeah')
        //    }
        // })

        // function requisitionHistory(){
        //     let getRequisitionObj = new XMLHttpRequest();

        //     getRequisitionObj.onreadystatechange = function (){
        //         if (getRequisitionObj.readyState == 4 && getRequisitionObj.status == 200){
        //             console.log(getRequisitionObj.response);
        //         }
        //     }

        //     getRequisitionObj.open("GET", `/user/getHistory/${userID}`, true);
        //     getRequisitionObj.send();
        // }


    }
</script>



