<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
       

        #mapVidCont{
    position: relative;
}
 #mapAsset{
    position:relative;
    width: 80%;
    height: 50%;
}

#video-grid{
    display: grid;
    grid-template-columns: 300px 300px;
    column-gap: 10px;
    row-gap: 10px;
    grid-auto-rows: 300px;
    padding:60px;
}

video {
    width:100%;
    height:100%;
    object-fit: cover;
    border: 5px solid lime;
}

.vidContainer{
    position: absolute;
    width:80%;
    margin:auto;
    top:0;
    left:50%;
    transform: translateX(-50%);
    opacity: 0.8;
    border: 1px solid green;
}
    </style>
    <!-- <script
    src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDuYptvwFszij8WWugKw5jQ6PkhiYqBo2c&libraries=&v=weekly&callback=initMap">
    </script> -->
    
    <script
    src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDuYptvwFszij8WWugKw5jQ6PkhiYqBo2c&libraries=visualization&callback=initMap" async defer>
    </script>
      
</head>
<body>
    <div class = "asset-details">
        <%console.log('Here is asset, ', asset)%> 
        <h2><%=asset.assetCode%></h2>
        <h4>Asset Type: <%= asset.assetType.assetTypeClass%></h4>
        <h4>Asset Status: <%= asset.status%></h4>
        <h4>Asset Assigned: <%= asset.assetAssignDate.toDateString()%></h4>
        
        
        <%if (asset.assetDescription != null){%>
            <h5><%=asset.assetDescription%></h5>
            
            <img height="150" width = "160" src="<%=asset.assetImageDetails%>">
            <%}%>
            <br>
            
            <div class="asset-details-btn-grid">
                <a href="/asset/<%=asset.id%>/edit">Edit</a>
                <!-- populate with the id so it can direct to the asset page -->
                <a href="/assetType/<%=asset.assetType.id%>/edit">View Asset Type/View User</a>
                <%-include('../partials/deleteForm', {url:`/asset/${asset.id}`})%>
            </div>
            <br/><br/>
            <div class="asset-details-asset-grid">
                <h5>List of Former Users</h5>
            </div>
        </div>
        <button id = 'traceBut'>Trace Path</button>
        <button id = 'trackBut' <%-asset.assetType.assetTypeTrackable ? "":"disabled"%> >Track Asset</button>
        <button id = 'videoLive'>Video Live</button>
        
        

        <div id = 'mapAsset'>Map goes in here</div>
        <div id = 'mapVidCont'>
            <div class = "vidContainer">
                <div id="video-grid"></div>
            </div>

        </div>
        

    <script src="https://unpkg.com/peerjs@1.4.7/dist/peerjs.min.js"></script>
    <script src="/socket.io/socket.io.js"></script>

    <script defer>
        var socket = io('http://localhost:2001');
        const myPeer = new Peer(undefined, {
            host:'/',
            port:'3001'
        })

        let mapAssetGrab;
        let assetVar = '<%-asset.id%>';
        let assetCode = '<%-asset.assetCode%>';
        let geoCoord = '<%-asset.assetLocationHistory[0].geoCoord%>';
        let assetObj = <%- JSON.stringify(asset)%>;
        let traceButGrab = document.getElementById('traceBut');
        let trackButGrab = document.getElementById('trackBut');
        let id;
        let watchPosOptions;
        let trackAssetBool = false;
        let assetTrackable = '<%-asset.assetType.assetTypeTrackable%>';
        let videoLiveGrab =  document.getElementById('videoLive');
        let videoLiveGrabBool = false;
        let videoGrid = document.getElementById('video-grid');
        let myVideo = document.createElement('video');
        myVideo.muted= true;
        
        const peers = {};
        // socket.emit('ready');
        window.onload = function(){
            alert ('Window!');
            // videoLiveGrab.click();
        }
        videoLiveGrab.addEventListener('click', ()=>{
            if (videoLiveGrabBool ==false){
                navigator.mediaDevices.getUserMedia({
                    video:true,
                    audio:true
                }).then(stream =>{
                    addVideoStream(myVideo, stream, 'lime');
                    myPeer.on('call', call=>{
                        call.answer(stream);
                        const video = document.createElement('video');
                        call.on('stream', userVideoStream=>{
                            alert('Receiving Stream 2...');
                            videoLiveGrab.style.backgroundColor = 'lime';
                            addVideoStream(video, userVideoStream, 'brown');
                        })
                    })
                    // socket.emit('ready');
                    socket.emit('ready', color=>{
                        videoLiveGrab.style.backgroundColor = color;
                    });
                    socket.on('user-joined', newUserId =>{
                        videoLiveGrab.style.backgroundColor = 'yellow';
                        console.log('User joined ', newUserId);
                        // alert('Called me!');
                        connectToNewUser(newUserId, stream)
                    })
                    
                    socket.on('user-disconnected', (userId)=>{
                        if (peers[userId]) peers[userId].close();
                        
                    })
                });
                    videoLiveGrabBool = !videoLiveGrabBool;
                }else {
                    // alert('Closing...');
                    socket.disconnect();
                    videoLiveGrab.style.backgroundColor = 'silver';
                    // socket.emit('disconnect', userId);
                    // socket.on('user-disconnected', (userId)=>{
                        // if (peers[userId]) peers[userId].close();
                        
                        // })
                    }
                })
                
                myPeer.on('open', id =>{
                console.log('This is userId now: ',id);
                
                //this userid is just an id. on the server side, it will not register as admin
                socket.emit('join-room', '2dabcb54-47c4-4999-88d1-b75650767c19', id); //2dabcb54-47c4-4999-88d1-b75650767c19
            })
            
            socket.on('readyLight', (userId)=>{
                // alert('The admin is live');
                console.log('The admin is live');
                videoLiveGrab.style.backgroundColor = 'red';
            });
            
            //enable videoLiveGrab button
            socket.on('enableTrackBut', (msg)=>{
                // alert(`Enabling... ${msg}`)
                trackButGrab.style.backgroundColor = 'yellow';
                videoLiveGrab.style.disabled = false;
            })

            let myLatLngArr = [];
            let LocationArr = assetObj.assetLocationHistory;
            let userActivityObj = {}; //keeps track of ... using a combination of Acitivity values (Assign/deAssign) and userId
            let geoCoordArr =[];
            let assignArr = [];
            var drawPolyBool = false;
            let flightPath; //for drawing poly
            let lineSymbol;

            function initMap(){
                mapAssetGrab = new google.maps.Map(document.getElementById('mapAsset'), {zoom:6, center:{lat:9, lng:7}});
                console.log('MapAsset', document.getElementById('mapAsset'))
                lineSymbol = {
                    path: google.maps.SymbolPath.FORWARD_CLOSED_ARROW,
                };
                    

                    traceButGrab.addEventListener('click', drawPoly);
                    trackButGrab.addEventListener('click', trackAsset);

                    LocationArr.forEach( (user,i)=>{
                            user.geoCoord.lat = +user.geoCoord.lat;
                            user.geoCoord.lng = +user.geoCoord.lng;
                        geoCoordArr.push(new google.maps.LatLng(user.geoCoord.lat, user.geoCoord.lng));
                    })
                    fetchFromLog();
            }
            
            function connectToNewUser(newUserId, stream){
                console.log('Calling... ', newUserId)
                const call = myPeer.call(newUserId, stream); //send your video
                const video = document.createElement('video');
                call.on('stream', userVideoStream=>{ //receive their video
                    console.log('Receiving from...', newUserId);
                    addVideoStream(video, userVideoStream, 'blue')
                })
                call.on('close', ()=>{
                    video.remove();
                })

                peers[newUserId] = call;

            }

            function addVideoStream(video, stream, col){
                video.style.borderColor = col;
                video.srcObject = stream;
                video.addEventListener('loadedmetadata', ()=>{
                    video.play();
                    videoGrid.append(video);
                })
            }


        alert('Trackable ' + assetTrackable)

        var socket = io('http://localhost:2001');
        socket.on('connect', ()=>{
                //  alert(`you connected on...${socket.id}`);
        })
        
        
        //for video
        // socket.emit('join-room', '2dabcb54-47c4-4999-88d1-b75650767c19', assetCode );
                
        // let uiSettings = {
        //         'onlyAdmin':'block'
        // }

        console.log('This is mapAssetGrab:', mapAssetGrab);
        console.log(assetVar);
        console.log(geoCoord.toString());
        console.log('---');
        console.log(assetObj);

        

        
        
        
        async function fetchFromLog(){
            userActivityObj =  await fetchDuration();
            console.log('&&');
            console.log(userActivityObj);

            if (userActivityObj['Assign'] != userActivityObj['DeAssign']) { //odd number; no deAssign
                console.log('??',userActivityObj['Assign'], userActivityObj['DeAssign'] );
                console.log(userActivityObj);
                //LocationArr[LocationArr.length -1]['_id']] -the last user in the array will always be the problematic one
                if ((userActivityObj.Assign - userActivityObj.DeAssign) == 1) { //if asset is assigned (and not deAssigned in a pool)
                    // if (userActivityObj['DeAssign'+'|'+ user._id] == undefined){//if this is not the case of a 2nd time assignment to same user
                    if (userActivityObj['DeAssign'+'|'+ LocationArr[LocationArr.length-1]._id] == undefined){//if this is not the case of a 2nd time assignment to same user
                        // userActivityObj['DeAssign'+'|'+ LocationArr[LocationArr.length -1]['_id']] = 0
                        userActivityObj['DeAssign'+'|'+LocationArr[LocationArr.length-1]._id] = 0;
                    }
                    userActivityObj['DeAssign'+'|'+LocationArr[LocationArr.length-1]._id] += Date.now()/86400000;
                }
            
            }

            LocationArr.forEach(async (user,i)=>{
                
                console.log(user);
                user.geoCoord.lat = +user.geoCoord.lat;
                user.geoCoord.lng = +user.geoCoord.lng;
                
                
                console.log('==')
                    console.log(userActivityObj);
    
                console.log('Before Mapping, ', userActivityObj)
                let iconVar = (i==0)? 'beginIcon.png': null;
                if (i == 0){
                    iconVar = 'beginIcon.png';
                }else if (i < LocationArr.length-1){
                    console.log(i, ' is less than ', LocationArr.length)
                    iconVar = null;
                } else {
                    // alert('Enter here')
                    iconVar = 'endIcon.png';  
                }
               var marker =  new google.maps.Marker({
                    position: user.geoCoord,
                    map:mapAssetGrab,
                    icon:iconVar,
                    title: user.firstName +', ' + Math.round(userActivityObj['DeAssign|'+user._id] - userActivityObj['Assign|'+user._id]) + 'Day(s)',
                    draggable: true
                });
    
                console.log('This is user', user);
                // marker.setTitle(user.firstName);
            })
        }
        

        async function fetchDuration(){ //it doesn't seem to use this2 argument//what then is the use of calling over LocationArr loop
            assignArr = [];
           let data = await fetch(`/asset/fromLogAssetDuration/${assetObj._id}`);
           let dataResponse = await data.json();
           console.log('This is data response', dataResponse);

           formUserActivityObject(dataResponse);
           console.log('This is object ', userActivityObj);     
            return userActivityObj;
        }


        function formUserActivityObject(dataResponse2){ //keeps track of ... using a combination of Acitivity values (Assign/deAssign) and userId
            let user = dataResponse2[dataResponse2.length -1].user;
            let date = dataResponse2[dataResponse2.length -1].activityDate;

            dataResponse2.forEach(data=>{
                userActivityObj[data.activity+'|'+data.user] = 0; // initiazlizing properties
                userActivityObj[data.activity] = 0; //keeping track of nos of Assign and DeAssign
            })
            
            dataResponse2.forEach(data=>{
                user = data.user //this user will be the last Assigned User, without a DeAssign
                userActivityObj[data.activity+'|'+data.user] += ((Date.parse(data.activityDate))/(86400000)); //1000*60*60*60*24
                userActivityObj[data.activity] += 1; //keeping track of nos of Assign and DeAssign
                 
            })

        }


        function drawPoly(){
            
            if (drawPolyBool){
                flightPath.setMap(null);
                drawPolyBool = !drawPolyBool;
            }else {
                console.log(geoCoordArr);
                flightPath = new google.maps.Polyline({
                    path: geoCoordArr,
                    icons:[
                        {
                            icon:lineSymbol,
                            offset:"100%",
                        },
                    ],
                    geodesic: true,
                    strokeColor: "#FF0000",
                    strokeOpacity: 1.0,
                    strokeWeight: 2,
                });
                flightPath.setMap(mapAssetGrab);
                drawPolyBool = !drawPolyBool;
            }
        }

        let trackingGeocoord = {};
        
        function trackAsset(){
            trackAssetBool = !trackAssetBool;
            if (trackAssetBool){

                        this.innerHTML = 'Tracking...';
                        this.style.backgroundColor = 'green';
                        this.style.color = 'white';

                id = navigator.geolocation.watchPosition(success, error, watchPosOptions);
                alert(trackAssetBool);
                alert(id)
            } else{
                        this.innerHTML = 'Track Asset';
                        this.style.backgroundColor = 'Ghostwhite';
                        this.style.color = 'black';
                alert('Clearing...');
                alert(id)
                navigator.geolocation.clearWatch(id);
                socket.emit('stopSendPos', {assetCode:assetCode});

            }
             function success(pos){
                alert('Changing..');
                console.log(`Polling... ${id}`);
                console.log('This is assetCode ', assetCode);
                var posObj = {
                    lat:pos.coords.latitude,
                    lng:pos.coords.longitude,
                    assetCode:assetCode
                }
                
                console.log('This is posObj', posObj);
                // alert(JSON.stringify(pos.coords.latitude));
                console.log('This is pos', pos)
                // alert('Successful!');
                // alert(pos.coords);
                let posObjStringified = JSON.stringify(posObj);
                alert(posObjStringified);
                socket.emit('sendPos', posObjStringified);

                //from here, socket it posObjStringified
                
                // let data = await fetch(`/asset/updateLocation/${assetObj._id}/${posObjStringified}`, {method:'PUT'});
                // let dataDat = await data.json();
                // console.log('||');
                // console.log(dataDat);
          
                const crd = pos.coords;
                trackingGeocoord.lat = pos.coords.latitude;
                trackingGeocoord.lng = pos.coords.longitude;
    
                console.log(trackingGeocoord);
    
    
                // mapAssetGrab.s
                alert(crd.latitude);
                console.log('??')
                console.log(crd);
                var marker =  new google.maps.Marker({
                        position: trackingGeocoord,
                        map:mapAssetGrab,
                        title: 'Moving car',
                        draggable: true,
                        animation:'bounce'
                    });
    
                navigator.geolocation.clearWatch(id);
            }
    
            function error(err) {
                alert('Not successful')
                console.error(`ERROR(${err.code}): ${err.message}`);
            }
    
            watchPosOptions = {
                enableHighAccuracy: false,
                timeout: 'Infinity',
                maximumAge: 0
            };
        }

            


    </script>
    </body>
    </html>