<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
       

        #mapVidCont{
    position: relative;
}
 #mapAsset{
    position:relative;
    width: 80%;
    height: 50%;
}

#video-grid{
    display: grid;
    grid-template-columns: 300px 300px;
    column-gap: 10px;
    row-gap: 10px;
    grid-auto-rows: 300px;
    padding:60px;
}

video {
    width:100%;
    height:100%;
    object-fit: cover;
    border: 5px solid lime;
}

.vidContainer{
    position: absolute;
    width:80%;
    margin:auto;
    top:0;
    left:50%;
    transform: translateX(-50%);
    opacity: 0.8;
    border: 1px solid green;
}
#mapAssignCont{
    display: flex;
    height: 70%;
    justify-content: space-between;
    column-gap: 1rem;
}

.mapAssignContItems{
    flex-basis:40%;
    background-color: cyan;
    flex-grow:1;
}

#directionsPanel{
    
}

    </style>
    <!-- <script
    src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDuYptvwFszij8WWugKw5jQ6PkhiYqBo2c&libraries=&v=weekly&callback=initMap">
    </script> -->
    
    <script
    src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDuYptvwFszij8WWugKw5jQ6PkhiYqBo2c&libraries=visualization&callback=initMap" async defer>
    </script>
      
</head>
<body>
    <div class = "asset-details">
        <%console.log('Here is asset, ', asset)%> 
        <h2><%=asset.assetCode%></h2>
        <h4>Asset Type: <%= asset.assetType.assetTypeClass%></h4>
        <h4>Asset Creation Date: <%= asset.assetCreationDate%></h4>
        <h4>Asset Status: <%= asset.assetStatus ? asset.assetStatus:"Applied/Pending Audit (or, Audit values)"%></h4> 
        <h4>Asset Allocation Status: <%= asset.assetAllocationStatus%></h4>
        <h4>Asset Assigned (Last): <%= asset.assetAssignDateHistory[asset.assetAssignDateHistory.length - 1]%></h4>
        <h4>Asset Assigned To (Last): <a href="/user/<%=asset.assetUserHistory[asset.assetUserHistory.length-1]?  asset.assetUserHistory[asset.assetUserHistory.length-1].id.toString() : ""%>"><%= asset.assetUserHistory[asset.assetUserHistory.length-1] ? asset.assetUserHistory[asset.assetUserHistory.length-1].id.toString() : 'Free Asset'%></a></h4>
        
        
        <%if (asset.assetDescription != null){%>
            <h5><%=asset.assetDescription%></h5>
            
            <img height="150" width = "160" src="<%=asset.assetImageDetails%>">
            <%}%>
            <br>
            
            <div class="asset-details-btn-grid">
                <a href="/asset/<%=asset.id%>/edit">Edit</a>
                <!-- populate with the id so it can direct to the asset page -->
                <a href="/assetType/<%=asset.assetType.id%>/edit">View Asset Type/View User</a>
                <%-include('../partials/deleteForm', {url:`/asset/${asset.id}`})%>
            </div>
            <br/><br/>
            <div class="asset-details-asset-grid">
                <h5>List of Former Users</h5>
            </div>
        </div>
        <button id = 'traceBut'>Trace Path</button>
        <button id = 'trackBut' <%-asset.assetType.assetTypeTrackable ? "":"disabled"%> >Track Asset</button>
        <button id = 'videoLive'>Video Live</button>
        <button id = 'assignBut' onclick="assignButFunc()">Assign</button>
        <button id= 'assetHistory' onClick = 'assetHistory()'>Asset History</button>

        
        
<div id="mapAssignCont">
    <div id = 'mapAsset' class="mapAssignContItems">Map goes in here</div>
    <div class="assignAssetDiv mapAssignContItems">
        search:
        <input id='userName' name="userName" type="text" onKeyUp = "bringUser(event)">
        directorate:
        <select name="userDir" id="userDir" onchange="bringUser(event)">
            <option value="DER">DER</option>
            <option value="FSAN">FSAN</option>
            <option value="R&R">R&R</option>
            <option value="A&HR">A&HR</option>
            <option value="" selected>None</option>
        </select>
        State:
        <select name="userState" id="userState" onchange="bringUser(event)">
            <option value="" selected>None</option>
            <option value="Abia">Abia</option>
            <option value="Adamawa">Adamawa</option>
            <option value="Anambra">Anambra</option>
            <option value="Akwa Ibom">Akwa Ibom</option>
            <option value="Bauchi">Bauchi</option>
            <option value="Bayelsa">Bayelsa</option>
            <option value="Benue">Benue</option>
            <option value="Borno">Borno</option>
            <option value="Kaduna">Cross Rivers</option>
            <option value="Delta">Delta</option>
            <option value="Ebonyi">Ebonyi</option>
            <option value="Edo">Edo</option>
            <option value="Ekiti">Ekiti</option>
            <option value="Enugu">Enugu</option>
            <option value="Federal Captial Territory">Federal Captial Territory</option>
            <option value="Gombe">Gombe</option>
            <option value="Imo">Imo</option>
            <option value="Jigawa">Jigawa</option>
            <option value="Kaduna">Kaduna</option>
            <option value="Kano">Kano</option>
            <option value="Katsina">Katsina</option>
            <option value="Kebbi">Kebbi</option>
            <option value="Kogi">Kogi</option>
            <option value="Kwara">Kwara</option>
            <option value="Lagos">Lagos</option>
            <option value="Nassarawa">Nassarawa</option>
            <option value="Niger">Niger</option>
            <option value="Ogun">Ogun</option>
            <option value="Ondo">Ondo</option>
            <option value="Osun">Osun</option>
            <option value="Oyo">Oyo</option>
            <option value="Plateau">Plateau</option>
            <option value="Rivers">Rivers</option>
            <option value="Sokoto">Sokoto</option>
            <option value="Taraba">Taraba</option>
            <option value="Yobe">Yobe</option>
            <option value="Zamfara">Zamfara</option>
          
    <option value = '{"state":"Plateau", "zone":"North-Central", "latLng":{"lat":"9.929973978", "lng":"8.890041055"}}'>Plateau</option>
    <option value = '{"state":"Rivers", "zone":"South-South", "latLng":{"lat":"4.810002257", "lng":"7.010000772"}}'>Rivers</option>
    <option value = '{"state":"Sokoto", "zone":"North-West", "latLng":{"lat":"13.06001548", "lng":"5.240031289"}}'>Sokoto</option>
    <option value = '{"state":"Taraba", "zone":"North-East", "latLng":{"lat":"7.870409769", "lng":"9.780012572"}}'>Taraba</option>
    <option value = '{"state":"Yobe", "zone":"North-East", "latLng":{"lat":"11.74899608", "lng":"11.96600457"}}'>Yobe</option>
    <option value = '{"state":"Zamfara", "zone":"North-West", "latLng":{"lat":"12.1704057", "lng":"6.659996296"}}'>Zamfara</option>
        </select>
        Rank:
        <select name="userRank" id="userRank" onchange="bringUser(event)">
            <option value="" selected>None</option>
            <option value="ROII">ROII</option>
            <option value="ROI">ROI</option>
            <option value="SRO">SRO</option>
            <option value="PRO">PRO</option>
            <option value="ACRO">ACRO</option>
            <option value="CRO">CRO</option>
            <option value="AD">AD</option>
            <option value="DD">DD</option>
        </select>
        Name:
        <select name="userNameSel" id="userNameSel"></select>
        <button id="mapDetails" onclick="hideShowDetails()" disabled>Details</button>
        <button onclick="assignToUser()">Assign</button>
    </div>
    <div id="directionsPanel"></div>
</div>
        <div id = 'mapVidCont'>
            <div class = "vidContainer">
                <div id="video-grid"></div>
            </div>

        </div>

        <div class="assetHistory">
            <%if (asset.assetActivityHistory){%>
                <div class="butCancelDiv">
                    <button class="butCancel" onClick = 'hideAssetHistory()'>x</button>
                </div>
                    <%asset.assetActivityHistory.forEach(activityObj =>{%>
                        <div>`Type: <%=activityObj.activity%>  | user:<%=activityObj.user%> By: <%=activityObj.activityBy%>  | Date:<%=activityObj.activityDate%>`</div>
                    <%})%>
            <%}%>
        </div> 

    <script src="https://unpkg.com/peerjs@1.4.7/dist/peerjs.min.js"></script>
    <script src="/socket.io/socket.io.js"></script>

    <script defer>
        // var socket = io('http://localhost:2001');
        var socket = io('https://assetmanger.herokuapp.com/asset/');

        // const myPeer = new Peer(undefined, {
        //     host:'/',
        //     port:'3001'
        // })

        let assetHistoryGrab = document.getElementsByClassName('assetHistory')[0];
        let mapAssetGrab;
        let directionsRenderer; //google maps
        let directionsPanelGrab = document.getElementById('directionsPanel');
        let directionsService; //google maps
        let assetVar = '<%-asset.id%>';
        let assetCode = '<%-asset.assetCode%>';
        let geoCoord = '<%- asset.assetLocationHistory[0]? asset.assetLocationHistory[0].geoCoord: {lat:"9.083333149", lng:"7.533328002"}%>'; //Default to FCT -store

        let assetObj = <%- JSON.stringify(asset)%>;
        let traceButGrab = document.getElementById('traceBut');
        let trackButGrab = document.getElementById('trackBut');
        let id;
        let watchPosOptions;
        let trackAssetBool = false;
        let assetTrackable = '<%-asset.assetType.assetTypeTrackable%>';
        let videoLiveGrab =  document.getElementById('videoLive');
        let videoLiveGrabBool = false;
        let videoGrid = document.getElementById('video-grid');
        let myVideo = document.createElement('video');
            myVideo.muted= true;

        let assignButGrab = document.getElementById('assignBut');
        
        //
        let userNameGrab = document.getElementById('userName');
        let userDirGrab = document.getElementById('userDir');
        let userStateGrab = document.getElementById('userState');
        let userRankGrab = document.getElementById('userRank');
        let assetLocArr = [];
        let mapDetailsGrab = document.querySelector('#mapDetails');
        let userNameSelGrab = document.getElementById('userNameSel');
        let butCancelGrab =  document.getElementsByClassName('butCancel')[0]
            
            userNameSelGrab.addEventListener('change', function(evt){
                alert('Changed');
                mapDetailsGrab.disabled = false;
                console.log(this);
                console.log(this.options[this.selectedIndex].value);
                console.log(this.options[this.selectedIndex]);
                // console.log(this.options[this.selectedIndex].('data-asset-geoCoord'));
                console.log(this.selectedIndex);
                let prospectiveUserCoord = this.options[evt.target.selectedIndex].getAttribute('data-asset-geoCoord');
                plotOnMap(prospectiveUserCoord)
            })

            function plotOnMap(coord){
                
                assetLocArr.forEach(marker=>{
                    marker.setMap(null);
                });

                coord = JSON.parse(coord);
                console.log('This is coord', coord)
                coord.lat = +coord.lat;
                coord.lng = +coord.lng;
                let googleMapCoord = new google.maps.LatLng(coord.lat, coord.lng)
                
                var marker =  new google.maps.Marker({
                    position: googleMapCoord, //new google.maps.LatLng(coord.lat, coord.lng),//user.geoCoord,
                    map:mapAssetGrab,
                    // icon:iconVar,
                    // title: user.firstName +', ' + Math.round(userActivityObj['DeAssign|'+user._id] - userActivityObj['Assign|'+user._id]) + 'Day(s)',
                    draggable: true
                });
                
                assetLocArr.push(marker);

                plotDirections(marker);
            }

            function plotDirections(marker){
                // console.log('Orgin of Asset Obj.: ', assetObj.assetLocationHistory.pop());//.assetLocationHistory.pop());
                console.log('This is assetObj:', assetObj);
                let latestLocationobj = assetObj.assetLocationHistory[assetObj.assetLocationHistory.length -1];//.assetLocationHistory.pop());
                console.log('This is it: ', latestLocationobj);
                let originCoord = latestLocationobj.geoCoord;
                console.log('geoCoord: ', originCoord);
                // let originCoord =  assetObj.assetUserHistory.pop();
                    // coord.lat = +coord.lat;
                    // coord.lng = +coord.lng;
                    let originCoordMapCoord = new google.maps.LatLng(originCoord.lat, originCoord.lng);
                let destinationCoord = marker.getPosition();
                // {

                        // origin: 'Hoboken NJ',
                        // destination: 'Carroll Gardens, Brooklyn',
                        // travelMode: 'TRANSIT',
                        // transitOptions: {
                        //     departureTime: new Date(1337675679473),
                        //     modes: ['BUS'],
                        //     routingPreference: 'FEWER_TRANSFERS'
                        // },
                        // unitSystem: google.maps.UnitSystem.IMPERIAL

                        // function calcRoute() {
                            // var start = document.getElementById('start').value;
                            // var end = document.getElementById('end').value;
                            var request = {
                                origin: originCoordMapCoord,
                                destination: destinationCoord,
                                travelMode: 'DRIVING'
                            };
                            console.log(directionsService)
                            directionsService.route(request, function(result, status) {
                                if (status == 'OK') {
                                directionsRenderer.setDirections(result);
                                }
                            });
                        // }
                        


            }

    let assignAssetDivGrab =  document.querySelector('.assignAssetDiv');
    // mapAssignContGrab.addEventListener('click', function (){

    // })
        
        const peers = {};
        // socket.emit('ready');
        // window.onload = function(){
            // alert ('Window!');
            // videoLiveGrab.click();
        // }
        videoLiveGrab.addEventListener('click', ()=>{
            if (videoLiveGrabBool ==false){
                navigator.mediaDevices.getUserMedia({
                    video:true,
                    audio:true
                }).then(stream =>{
                    addVideoStream(myVideo, stream, 'lime');
                    // myPeer.on('call', call=>{
                    //     call.answer(stream);
                    //     const video = document.createElement('video');
                    //     call.on('stream', userVideoStream=>{
                    //         alert('Receiving Stream 2...');
                    //         videoLiveGrab.style.backgroundColor = 'lime';
                    //         addVideoStream(video, userVideoStream, 'brown');
                    //     })
                    // })
                    // socket.emit('ready');
                    socket.emit('ready', color=>{
                        videoLiveGrab.style.backgroundColor = color;
                    });
                    socket.on('user-joined', newUserId =>{
                        videoLiveGrab.style.backgroundColor = 'yellow';
                        console.log('User joined ', newUserId);
                        // alert('Called me!');
                        connectToNewUser(newUserId, stream)
                    })
                    
                    socket.on('user-disconnected', (userId)=>{
                        if (peers[userId]) peers[userId].close();
                        
                    })
                });
                    videoLiveGrabBool = !videoLiveGrabBool;
                }else {
                    // alert('Closing...');
                    socket.disconnect();
                    videoLiveGrab.style.backgroundColor = 'silver';
                    // socket.emit('disconnect', userId);
                    // socket.on('user-disconnected', (userId)=>{
                        // if (peers[userId]) peers[userId].close();
                        
                        // })
                    }
                })
                
                // myPeer.on('open', id =>{
                // console.log('This is userId now: ',id);
                
                //     //this userid is just an id. on the server side, it will not register as admin
                //     socket.emit('join-room', '2dabcb54-47c4-4999-88d1-b75650767c19', id); //2dabcb54-47c4-4999-88d1-b75650767c19
                // })
            
            socket.on('readyLight', (userId)=>{
                // alert('The admin is live');
                console.log('The admin is live');
                videoLiveGrab.style.backgroundColor = 'red';
            });
            
            //enable videoLiveGrab button
            socket.on('enableTrackBut', (msg)=>{
                // alert(`Enabling... ${msg}`)
                trackButGrab.style.backgroundColor = 'yellow';
                videoLiveGrab.style.disabled = false;
            })

            let myLatLngArr = [];
            let LocationArr = assetObj.assetLocationHistory;
            // let LocationArr = assetObj.assetLocationHistory.length? assetObj.assetLocationHistory:[{geoCoord:{lat:"9.083333149", lng:"7.533328002"}}];
            let userActivityObj = {}; //keeps track of ... using a combination of Acitivity values (Assign/deAssign) and userId
            let geoCoordArr =[];
            let assignArr = [];
            var drawPolyBool = false;
            let flightPath; //for drawing poly
            let lineSymbol;

            function initMap(){
                console.log('First here now')
                mapAssetGrab = new google.maps.Map(document.getElementById('mapAsset'), {zoom:6, center:{lat:9, lng:7}});
                directionsService = new google.maps.DirectionsService();
                console.log('This is service obj: ', directionsService);
                            
                            //directions
                            directionsRenderer = new google.maps.DirectionsRenderer();
                            directionsRenderer.setMap(mapAssetGrab);
                            directionsRenderer.setPanel(document.getElementById('directionsPanel'));
                console.log('MapAsset', document.getElementById('mapAsset'))
                lineSymbol = {
                    path: google.maps.SymbolPath.FORWARD_CLOSED_ARROW,
                };
                    

                    traceButGrab.addEventListener('click', drawPoly);
                    trackButGrab.addEventListener('click', trackAsset);

                    LocationArr.forEach( (user,i)=>{
                        user.geoCoord.lat = +user.geoCoord.lat;
                        user.geoCoord.lng = +user.geoCoord.lng;
                        console.log('Here is lat', +user.geoCoord.lat)
                        console.log('Here is lng', +user.geoCoord.lng)
                        geoCoordArr.push(new google.maps.LatLng(user.geoCoord.lat, user.geoCoord.lng));
                    })
                    fetchFromLog();
            }
            
            function connectToNewUser(newUserId, stream){
                console.log('Calling... ', newUserId)
                // const call = myPeer.call(newUserId, stream); //send your video
                const video = document.createElement('video');
                call.on('stream', userVideoStream=>{ //receive their video
                    console.log('Receiving from...', newUserId);
                    addVideoStream(video, userVideoStream, 'blue')
                })
                call.on('close', ()=>{
                    video.remove();
                })

                peers[newUserId] = call;

            }

            function addVideoStream(video, stream, col){
                video.style.borderColor = col;
                video.srcObject = stream;
                video.addEventListener('loadedmetadata', ()=>{
                    video.play();
                    videoGrid.append(video);
                })
            }


        alert('Trackable ' + assetTrackable)

        // var socket = io('http://localhost:2001');
        var socket = io('https://assetmanger.herokuapp.com/asset/');

        socket.on('connect', ()=>{
                //  alert(`you connected on...${socket.id}`);
        })
        
        
        //for video
        // socket.emit('join-room', '2dabcb54-47c4-4999-88d1-b75650767c19', assetCode );
                
        // let uiSettings = {
        //         'onlyAdmin':'block'
        // }

        console.log('This is mapAssetGrab:', mapAssetGrab);
        console.log(assetVar);
        console.log(geoCoord.toString());
        console.log('---');
        console.log(assetObj);

        

        
        
        
        async function fetchFromLog(){
            userActivityObj =  await fetchDuration();
            console.log('&&');
            console.log(userActivityObj);
if (userActivityObj){
            if (userActivityObj['Assign'] != userActivityObj['DeAssign']) { //odd number; no deAssign
                console.log('??',userActivityObj['Assign'], userActivityObj['DeAssign'] );
                console.log(userActivityObj);
                //LocationArr[LocationArr.length -1]['_id']] -the last user in the array will always be the problematic one
                if ((userActivityObj.Assign - userActivityObj.DeAssign) == 1) { //if asset is assigned (and not deAssigned in a pool)
                    // if (userActivityObj['DeAssign'+'|'+ user._id] == undefined){//if this is not the case of a 2nd time assignment to same user
                    if (userActivityObj['DeAssign'+'|'+ LocationArr[LocationArr.length-1]._id] == undefined){//if this is not the case of a 2nd time assignment to same user
                        // userActivityObj['DeAssign'+'|'+ LocationArr[LocationArr.length -1]['_id']] = 0
                        userActivityObj['DeAssign'+'|'+LocationArr[LocationArr.length-1]._id] = 0;
                    }
                    userActivityObj['DeAssign'+'|'+LocationArr[LocationArr.length-1]._id] += Date.now()/86400000;
                }
            
            }
        }

            LocationArr.forEach(async (user,i)=>{
                
                console.log(user);
                user.geoCoord.lat = +user.geoCoord.lat;
                user.geoCoord.lng = +user.geoCoord.lng;
                
                
                console.log('==')
                    console.log(userActivityObj);
    
                console.log('Before Mapping, ', userActivityObj)
                let iconVar = (i==0)? 'beginIcon.png': null;
                if (i == 0){
                    iconVar = 'beginIcon.png';
                }else if (i < LocationArr.length-1){
                    console.log(i, ' is less than ', LocationArr.length)
                    iconVar = null;
                } else {
                    // alert('Enter here')
                    iconVar = 'endIcon.png';  
                }
               var marker =  new google.maps.Marker({
                    position: user.geoCoord,
                    map:mapAssetGrab,
                    icon:iconVar,
                    title: user.firstName +', ' + (userActivityObj? Math.round(userActivityObj['DeAssign|'+user._id] - userActivityObj['Assign|'+user._id]) + 'Day(s)':"No DeAssign/Assign cycle yet"),
                    draggable: true
                });
    
                console.log('This is user', user);
                // marker.setTitle(user.firstName);
            })
        }
        

        async function fetchDuration(){ //it doesn't seem to use this2 argument//what then is the use of calling over LocationArr loop
            assignArr = [];
           let data = await fetch(`/asset/fromLogAssetDuration/${assetObj._id}`);
           let dataResponse = await data.json();
           console.log('This is data response', dataResponse);
                    if (dataResponse.length){
                            formUserActivityObject(dataResponse);
                            console.log('This is object ', userActivityObj);     
                                return userActivityObj;
                    }
        }


        function formUserActivityObject(dataResponse2){ //keeps track of ... using a combination of Acitivity values (Assign/deAssign) and userId
            let user = dataResponse2[dataResponse2.length -1].user;
            let date = dataResponse2[dataResponse2.length -1].activityDate;

            dataResponse2.forEach(data=>{
                userActivityObj[data.activity+'|'+data.user] = 0; // initiazlizing properties
                userActivityObj[data.activity] = 0; //keeping track of nos of Assign and DeAssign
            })
            
            dataResponse2.forEach(data=>{
                user = data.user //this user will be the last Assigned User, without a DeAssign
                userActivityObj[data.activity+'|'+data.user] += ((Date.parse(data.activityDate))/(86400000)); //1000*60*60*60*24
                userActivityObj[data.activity] += 1; //keeping track of nos of Assign and DeAssign
                 
            })

        }


        function drawPoly(){
            
            if (drawPolyBool){
                flightPath.setMap(null);
                drawPolyBool = !drawPolyBool;
            }else {
                console.log(geoCoordArr);
                flightPath = new google.maps.Polyline({
                    path: geoCoordArr,
                    icons:[
                        {
                            icon:lineSymbol,
                            offset:"100%",
                        },
                    ],
                    geodesic: true,
                    strokeColor: "#FF0000",
                    strokeOpacity: 1.0,
                    strokeWeight: 2,
                });
                flightPath.setMap(mapAssetGrab);
                drawPolyBool = !drawPolyBool;
            }
        }

        let trackingGeocoord = {};
        
        function trackAsset(){
            trackAssetBool = !trackAssetBool;
            if (trackAssetBool){

                        this.innerHTML = 'Tracking...';
                        this.style.backgroundColor = 'green';
                        this.style.color = 'white';

                id = navigator.geolocation.watchPosition(success, error, watchPosOptions);
                alert(trackAssetBool);
                alert(id)
            } else{
                        this.innerHTML = 'Track Asset';
                        this.style.backgroundColor = 'Ghostwhite';
                        this.style.color = 'black';
                alert('Clearing...');
                alert(id)
                navigator.geolocation.clearWatch(id);
                socket.emit('stopSendPos', {assetCode:assetCode});

            }
             function success(pos){
                alert('Changing..');
                console.log(`Polling... ${id}`);
                console.log('This is assetCode ', assetCode);
                var posObj = {
                    lat:pos.coords.latitude,
                    lng:pos.coords.longitude,
                    assetCode:assetCode
                }
                
                console.log('This is posObj', posObj);
                // alert(JSON.stringify(pos.coords.latitude));
                console.log('This is pos', pos)
                // alert('Successful!');
                // alert(pos.coords);
                let posObjStringified = JSON.stringify(posObj);
                alert(posObjStringified);
                socket.emit('sendPos', posObjStringified);

                //from here, socket it posObjStringified
                
                // let data = await fetch(`/asset/updateLocation/${assetObj._id}/${posObjStringified}`, {method:'PUT'});
                // let dataDat = await data.json();
                // console.log('||');
                // console.log(dataDat);
          
                const crd = pos.coords;
                trackingGeocoord.lat = pos.coords.latitude;
                trackingGeocoord.lng = pos.coords.longitude;
    
                console.log(trackingGeocoord);
    
    
                // mapAssetGrab.s
                alert(crd.latitude);
                console.log('??')
                console.log(crd);
                var marker =  new google.maps.Marker({
                        position: trackingGeocoord,
                        map:mapAssetGrab,
                        title: 'Moving car',
                        draggable: true,
                        animation:'bounce'
                    });
    
                navigator.geolocation.clearWatch(id);
            }
    
            function error(err) {
                alert('Not successful')
                console.error(`ERROR(${err.code}): ${err.message}`);
            }
    
            watchPosOptions = {
                enableHighAccuracy: false,
                timeout: 'Infinity',
                maximumAge: 0
            };
        }

        function assignButFunc(){
            alert('Assigning...');
            if (assignAssetDivGrab.style.display == 'none'){
                assignAssetDivGrab.style.display = 'inline';
            }else{
                assignAssetDivGrab.style.display = 'none';
            }
        }

        async function bringUser(event){
            console.log(event.target.value);
            let obj = {
                userDir: userDirGrab.value,
                userState:userStateGrab.value,
                userRank:userRankGrab.value,
                userName:userNameGrab.value
            }
            let objString = JSON.stringify(obj);
            let data = await fetch(`/asset/bringUser/${objString}`);
           let dataResponse = await data.json();
           console.log(dataResponse);
                while (userNameSelGrab.options.length){
                    userNameSelGrab.remove(0);
                }       
           await dataResponse.forEach((userObj,i)=>{
            console.log(userNameSelGrab);
            userNameSelGrab.options[i] = new Option(userObj.name)
            userNameSelGrab.options[i].value = userObj.id;
            userNameSelGrab.options[i].setAttribute('data-asset-geoCoord', JSON.stringify(userObj.geoCoord));
            // userNameSelGrab.options[i].setAttribute('data-geocoord', JSON.stringify({name:'Adeiza', age:21}));
            //   userNameSelGrab.options[i].addEventListener('mouseover', function(){
            //     console.log(this.value)
            // })
           })
        }

        function hideShowDetails(){
            alert('Hide details')
            if (directionsPanelGrab.style.display == 'none'){
                directionsPanelGrab.style.display = 'inline';
            }else{
                directionsPanelGrab.style.display = 'none ';
            }
        }

        async function assignToUser(){
            const requestOptions = {
                method: 'PUT',
                // headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ title: 'Fetch PUT Request Example' })
            };
            var data = await fetch(`/asset/assignToUser/${userNameSelGrab.value}/${assetVar}`, requestOptions);
            let dataResponse = await data.json();
            console.log(dataResponse);
        }

        function assetHistory(){
            // let butCancel = document.createElement('button');
            //     butCancel.setAttribute('class', 'butCancel')
            //     butCancel.innerHTML = 'x'
            // assetHistoryGrab.append(butCancel)
            assetHistoryGrab.classList.remove('hide');
            assetHistoryGrab.classList.toggle('unHide');
        }

        function hideAssetHistory(){
                console.log(butCancelGrab);
            console.log(butCancelGrab.parentNode.parentNode);
            butCancelGrab.parentNode.parentNode.classList.toggle('hide')
            butCancelGrab.parentNode.parentNode.classList.toggle('unHide')
            // assetHistoryGrab.classList.toggle('hide');
            // assetHistoryGrab.classList.remove('unHide');
    
        }

    </script>
    </body>
    </html>