<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        #floating-panel {
  position: absolute;
  top: 30px;
  left: 25%;
  z-index: 5;
  background-color: #fff;
  padding: 5px;
  border: 1px solid #999;
  text-align: center;
  font-family: "Roboto", "sans-serif";
  line-height: 30px;
  padding-left: 10px;
}

#floating-panel {
  background-color: #fff;
  border: 1px solid #999;
  left: 50%;
  padding: 5px;
  position: absolute;
  top: 70px;
  z-index: 5;
}
    </style>

    <script
    src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDuYptvwFszij8WWugKw5jQ6PkhiYqBo2c&libraries=visualization&callback=initMap" async defer>
    </script>

</head>
<body>
    <div class='div-cont'>
        <div id="floating-panel">
            <button id="toggle-heatmap">Toggle Heatmap</button>
            <button id="change-gradient">Change gradient</button>
            <button id="change-radius">Change radius</button>
            <button id="change-opacity">Change opacity</button>
          </div>
        <div id = 'nationalMap'>Map goes in here</div>
        <div class = 'div-ctrl'>
            <!-- <p><select id = 'cat' onchange="categoryOptions(this)"> -->
            <p><select id = 'cat'>
                <option value= "/overview/mapping/user">Users</option>
                <option value= "/overview/mapping/assetType">Asset Types</option>
                <option value= "/overview/mapping/asset">Assets</option>
                <option value= "/overview/mapping/contractor">Contractor</option>
            </select>
            </p>

            <p><select id='subCat'>
                <option>Regulatory Officers</option>
                <option>Admin Officers</option>
                <option>Laboratory Officers</option>
                <option>Account Officers</option>
                <option>Legal Officers</option>
                <option selected>All</option>
            </select>
            </p>

            <p>
                <button onclick="subCategoryOptions(getSubVar.value)">Map Spread</button> | <button id= 'mapAll' onclick="catGrab.onchange()">Map All (Reset)</button>
            </p>
            
            
            <p>
                <button id = 'trackFleet'>Track Fleet</button>
            </p>
        </div>
    <div>
  <script>
    let getSubVar;
    let subCatGrab;
    let mapMarkerArr;
    let mapSet;
    let heatMap;
    let heatMapArr2 =[];
    function initMap(){
            let mapAllGrab = document.getElementById('mapAll');
            let toggleHeatMapGrab = document.getElementById('toggle-heatmap');
            
            //toggling the heatmap
            toggleHeatMapGrab.addEventListener('click', function(){
                if (heatMap.getMap() !==null){
                    heatMap.setMap(null)
                }else{
                    heatMap.setMap(mapSet)
                }
            })
            mapSet = new google.maps.Map(document.getElementById('nationalMap'), {zoom:6, center:{lat:9, lng:7}});
            console.log(mapSet);
            
            let getVar = new XMLHttpRequest();
            getSubVar = new XMLHttpRequest();
            var catGrab = document.getElementById('cat');

                catGrab.addEventListener('change', function(){
                    categoryOptions(this);
                });

                mapAllGrab.addEventListener('click', function(){
                    categoryOptions(catGrab); //first call
                });

                console.log('//')
                console.log(catGrab);
                
            var markerArr = [];
            mapMarkerArr = [];
            
            let trackFleetGrab = document.getElementById('trackFleet');
            trackFleetGrab.addEventListener('click', trackFleetNow);
            
            categoryOptions(catGrab); //first call

            function categoryOptions(this2){
                
                if (heatMap){
                    heatMap.setMap(null);
                }
                alert('Here')
                getVar.onreadystatechange = function(){

                    //Clearing map if any markers
                    if (mapMarkerArr)
                    mapMarkerArr.forEach(marker=>{
                            marker.setMap(null);
                    })
                    

                    
                    if(getVar.readyState == 4 && getVar.status == 200){ 
                        heatMapArr = []; //for the heatmap
                        markerArr = [];
                        mapMarkerArr = [];
                        // userArr = []
                        anyArr = []
                    console.log(getVar.response);
                    let responseObj = JSON.parse(getVar.response);
                    // console.log(responseObj[48].geoCoord);
                    responseObj.resp.forEach(item=>{
                        console.log(item);
                        item.geoCoord? anyArr.push(item.firstName):anyArr.push(item.assetName);
                        markerArr.push(item.geoCoord?item.geoCoord:item.assetLocationHistory[0].geoCoord); //first option is for user, second for asset, because of differences in their object structure
                        console.log(item.geoCoord?item.geoCoord:item.assetLocationHistory[0].geoCoord);
                        objCoord = item.geoCoord?item.geoCoord:item.assetLocationHistory[0].geoCoord
                        heatMapArr.push(new google.maps.LatLng(objCoord.lat, objCoord.lng));//item.geoCoord?item.geoCoord:+item.assetLocationHistory[0].geoCoord));
                    });

                    console.log('This is heat map Arr', heatMapArr);

                    markerArr.forEach((marker,i)=>{
                        let mapMarker = new google.maps.Marker({
                            position: {lat:+marker['lat'], lng:+marker['lng']},
                            map:mapSet,
                            title: `${anyArr[i]}`,
                            draggable:true
                        });
                        mapMarkerArr.push(mapMarker);
                    })

                        heatMap = new google.maps.visualization.HeatmapLayer({
                        data:heatMapArr,
                        dissipating:false,
                        radius:1,
                        opacity:0.9
                    });
                    heatMap.setMap(mapSet);
                    console.log('--')
                    console.log(heatMap)
                    
                    populateSubCatSel(responseObj.category)
                }
                    
                }

                getVar.open("GET", this2.value, true);
                getVar.send()
            }

            function populateSubCatSel(categoryArr){
                subCatGrab = document.getElementById('subCat');
                    while (subCatGrab.options.length){
                        subCatGrab.remove(0);
                    }

                categoryArr.forEach((category, i)=>{
                    subCatGrab.options[i] = new Option(category);
                    subCatGrab.options[i].value = `${catGrab.value}/${category}`;
                })
            }

            async function trackFleetNow(){
                let data = await fetch('/overview/trackFleet');
                let dataResponse = await data.json();
                console.log(dataResponse);
                dataResponse.forEach(asset=>{
                    new google.maps.Marker({
                            position: {lat:+asset.assetTrackedPosition['lat'], lng:+asset.assetTrackedPosition['lng']},
                            map:mapSet,
                            animation: google.maps.Animation.BOUNCE,
                            title: asset.assetCode,
                            draggable:true
                        });
                })
            }

            

    //   function initMap(){
        alert('Loaded Visualization')
      }

      function subCategoryOptions(){
        heatMapArr2 = [];
                getSubVar.onreadystatechange = function(){

                    //Clearing map if any markers
                    mapMarkerArr.forEach(marker=>{
                            marker.setMap(null);
                    })
                    

                    markerArr = [];
                    mapMarkerArr = [];
                    anyArr = []

                    if(getSubVar.readyState == 4 && getSubVar.status == 200){ 
                    console.log(getSubVar.response);
                    let responseObj = JSON.parse(getSubVar.response);
                    responseObj.forEach(item=>{
                        console.log(item);
                        item.geoCoord? anyArr.push(item.firstName):anyArr.push(item.assetName);
                        let objCoord = item.geoCoord?item.geoCoord:item.assetLocationHistory[0].geoCoord
                        heatMapArr2.push(new google.maps.LatLng(objCoord.lat, objCoord.lng));//item.geoCoord?item.geoCoord:+item
                        markerArr.push(item.geoCoord?item.geoCoord:item.assetLocationHistory[0].geoCoord); //first option is for user, second for asset, because of differences in their object structure
                    });

                    markerArr.forEach((marker,i)=>{
                        let mapMarker = new google.maps.Marker({
                            position: {lat:+marker['lat'], lng:+marker['lng']},
                            map:mapSet,
                            title: `${anyArr[i]}`,
                            draggable:true
                        });
                        mapMarkerArr.push(mapMarker);
                    })
                    
                    console.log(heatMap);
                    heatMap.setMap(null);

                    //
                    console.log('**');
                    console.log(heatMapArr2);
                    heatMap.setData(heatMapArr2);

                    heatMap.setMap(mapSet);
                }
                    
                }

                getSubVar.open("GET", subCatGrab.value, true);
                getSubVar.send()
            }
  </script>
</body>
</html>

