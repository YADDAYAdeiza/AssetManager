<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        #floating-panel {
  position: absolute;
  top: 30px;
  left: 25%;
  z-index: 5;
  background-color: #fff;
  padding: 5px;
  border: 1px solid #999;
  text-align: center;
  font-family: "Roboto", "sans-serif";
  line-height: 30px;
  padding-left: 10px;
}

#floating-panel {
  background-color: #fff;
  border: 1px solid #999;
  left: 50%;
  padding: 5px;
  position: absolute;
  top: 70px;
  z-index: 5;
}

#mapVidCont{
    position: relative;
}
#nationalMap{
    position:relative;
}

#video-grid{
    display: grid;
    grid-template-columns: 300px 300px;
    column-gap: 10px;
    row-gap: 10px;
    grid-auto-rows: 300px;
    padding:60px;
}

video {
    width:100%;
    height:100%;
    object-fit: cover;
    border: 5px solid lime;
}

.vidContainer{
    position: absolute;
    width:80%;
    margin:auto;
    top:0;
    left:50%;
    transform: translateX(-50%);
    opacity: 0.8;
    border: 1px solid green;
}
    </style>

    <script defer
    src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDuYptvwFszij8WWugKw5jQ6PkhiYqBo2c&libraries=visualization&callback=initMap" async defer>
    </script>

</head>
<body>
    <div class='div-cont'>
        <div id="floating-panel">
            <button id="toggle-heatmap">Toggle Heatmap</button>
            <button id="change-gradient">Change gradient</button>
            <button id="change-radius">Change radius</button>
            <button id="change-opacity">Change opacity</button>
        </div>
        <div id = 'mapVidCont'>
            <div id = 'nationalMap'>Map goes in here</div>
            <div class = "vidContainer">
                <div id="video-grid"></div>
            </div>

        </div>
        <div class = 'div-ctrl'>
            <!-- <p><select id = 'cat' onchange="categoryOptions(this)"> -->
            <p><select id = 'cat'>
                <option value= "/overview/mapping/user">Users</option>
                <option value= "/overview/mapping/assetType">Asset Types</option>
                <option value= "/overview/mapping/asset">Assets</option>
                <option value= "/overview/mapping/contractor">Contractor</option>
            </select>
            </p>

            <p><select id='subCat'>
                <option>Regulatory Officers</option>
                <option>Admin Officers</option>
                <option>Laboratory Officers</option>
                <option>Account Officers</option>
                <option>Legal Officers</option>
                <option selected>All</option>
            </select>
            </p>

            <p>
                <!-- <button onclick="subCategoryOptions(getSubVar.value)">Map Spread</button> | <button id= 'mapAll' onclick="catGrab.onchange()">Map All (Reset)</button> -->
                <button onclick="subCategoryOptions()">Map Spread</button> | <button id= 'mapAll' onclick="catGrab.onchange()">Map All (Reset)</button>
            </p>
            
            
            <p>
                <button id = 'trackFleet'>Track Fleet</button>
                <button id = 'videoLive'>Video Live</button>
                <button id = 'startLiveBut'>Start Meeting</button>
            </p>
        </div>
        <div class="trackedAssetDivCont">
            <div class="trackedAssetDivReveal">View Assets   v</div>
            <div class="tabDriver">
                <button class="tablinks" onclick="openCity(event, 'move')">On Move</button>
                <button class="tablinks" onclick="openCity(event, 'pause')">Paused</button>
                <button class="tablinks" onclick="openCity(event, 'noMove')">No Move</button>
              </div>
              <div id="move" class="tabcontent">
                <h3>On the Move</h3>
                <p>London is the capital city of England.</p>
              </div>
              
              <div id="pause" class="tabcontent">
                <h3>On Pause</h3>
                <p>Paris is the capital of France.</p>
              </div>
              
              <div id="noMove" class="tabcontent">
                <h3>No Move</h3>
                <p>Tokyo is the capital of Japan.</p>
                <%trackableAsset.forEach(asset=>{%>
                    <div id = '<%=asset.assetCode%>' class = 'trackedAssetDiv'><%=asset.assetCode%></div>
                <%})%>
              </div>
        </div>
    <div>
        <div>
            <canvas id="myChart"></canvas>
        </div>
        <script src="https://unpkg.com/peerjs@1.4.7/dist/peerjs.min.js"></script>
        <script src="/socket.io/socket.io.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

  <script>

    //tabDriver
        function openCity(evt, cityName) {
            // Declare all variables
            var i, tabcontent, tablinks;

            // Get all elements with class="tabcontent" and hide them
            tabcontent = document.getElementsByClassName("tabcontent");
            for (i = 0; i < tabcontent.length; i++) {
            tabcontent[i].style.display = "none";
            }

            // Get all elements with class="tablinks" and remove the class "active"
            tablinks = document.getElementsByClassName("tablinks");
            for (i = 0; i < tablinks.length; i++) {
            tablinks[i].className = tablinks[i].className.replace(" active", "");
            }

            // Show the current tab, and add an "active" class to the button that opened the tab
            document.getElementById(cityName).style.display = "block";
            evt.currentTarget.className += " active";
        }
//end of the tabDriver

    let trackedAssetDivContGrab = document.getElementsByClassName('trackedAssetDivCont')[0];
    let trackedAssetDivRevealGrab = document.getElementsByClassName('trackedAssetDivReveal')[0];// createElement('div');
    let trackedAssetDivRevealGrabBool = false;
    console.log('This is it:', trackedAssetDivRevealGrab);
    trackedAssetDivRevealGrab.addEventListener('click', function(){
        console.log(this.parentNode);
        if (trackedAssetDivRevealGrabBool){
            this.innerText = 'View Assets    ^';
            trackedAssetDivRevealGrabBool = !trackedAssetDivRevealGrabBool;
            trackedAssetDivContGrab.classList.toggle('reveal');
        }else {
            this.innerText = 'View Assets    v';
            trackedAssetDivRevealGrabBool = !trackedAssetDivRevealGrabBool;
            trackedAssetDivContGrab.classList.toggle('reveal');
        }
    })

    // var socket = io('http://localhost:2001');
    var socket = io('https://assetmanger.herokuapp.com/');
        // const myPeer = new Peer(undefined, {
        //     host:'/',
        //     port:'3001'
        // })
        const myPeer = new Peer(undefined, {
            host:'0.peerjs.com',
            port:'443'
        })

        // const myPeer = new Peer(undefined, {
        //     secure: true,
        //     host: 'assetmanger.herokuapp.com',
        //     port: '443'
        // })

        // const myPeer = new Peer();

      console.log('This is socket: ', socket);  
        socket.on('connect', function() {
            console.log('check 2', socket.connected);
        });
    socket.on('connect', ()=>{
        // alert(`you connected national on...${socket.id}`);
        const transport = socket.io.engine.transport.name;
        alert(transport);
    });

    socket.emit('adminMonitoringTracking', 'Fetching tracked...');
    socket.on('trackPlots', (msg)=>{
        console.log(msg);
    })

    // socket.on('enableTrackBut', (msg)=>{
    //     console.log('Enabled....');
    // })

    
    
    // window.addEventListener('beforeunload', function(){
        //     alert('closing...')
        // })
        // window.onbeforeunload = function () {
            // alert("Do you really want to close?");
            // };
            var posCoordsObj = {};
            var trackFleetArrObj = {};
            let trackFleetArrObjPosition = {};
            socket.on('dutyOn', (msg)=>{//

                //clearing asset markers, readying for update
                // trackFleetArr.forEach(marker=>{
                //     // alert('Clearing marker'+ marker.getTitle())
                //     marker.setMap(null)
                // })

                
                msgObj = JSON.parse(msg)
                
                // alert('dutyOn');
                console.log('??');
                console.log(msg);
                posCoords = JSON.parse(msg);

            
                
                console.log('This is the thing: ', posCoordsObj[posCoords.assetCode]);
                    
                if (posCoordsObj[posCoords.assetCode] != true){
                    console.log('Creating innerdiv');
                    // trackedAssetDiv.setAttribute('id', posCoords.assetCode);
                    // trackedAssetDiv.setAttribute('class', 'dutyOn');

                    let moveDiv = document.getElementById(posCoords.assetCode);
                    moveDiv.classList.add('dutyOn')
                    document.getElementById('move').append(moveDiv);
                    // trackedAssetDivContGrab.getElement
                   
                    posCoordsObj[posCoords.assetCode] = true;

                    //create new marker
                    mapMarker = new google.maps.Marker({
                        map:mapSet,
                        position: {lat:+posCoords['lat'], lng:+posCoords['lng']},
                        title: posCoords['assetCode'],
                        draggable:true,
                        animation: google.maps.Animation.BOUNCE,   
                    });
                    trackFleetArrObj[posCoords.assetCode] = mapMarker;
                    trackFleetArrObjPosition[posCoords.assetCode] = posCoords;
                    trackFleetArr.push(mapMarker);
                    reDrawChart();
                }else {
                     //clearing the concerned, individual msg marker, readying for updating it's position
                     mapMarker.setPosition({lat:+posCoords['lat'], lng:+posCoords['lng']});
                    trackFleetArrObj[posCoords.assetCode] = mapMarker;

                    //resuming from off duty. (Was once onDuty)
                    // document.getElementById(posCoords.assetCode).classList.remove('stopOnDuty');
                    // document.getElementById(posCoords.assetCode).classList.add('dutyOn');
                    console.log('Off duty classlist: ', document.getElementById(posCoords.assetCode).classList);
                }
                
                                
                                
                                //Notification.requestPermission().then(perm=>{
                                   // if (perm === 'granted'){
                                       // var notification = new Notification(`${msgObj.assetCode}...is on the move`, {body:'Tap to follow'});
                                        
                                        //notification.addEventListener('click', e=>{
                            // mapSet.setZoom(24);

                            // 
                            // mapSet.setCenter(mapMarker.getPosition());
                            //

                            //changing position of asset markers
                            Object.keys(trackFleetArrObj).forEach(key=>{
                                console.log(`Setting ${trackFleetArrObj[key]} to ${trackFleetArrObjPosition[key]}`);
                                trackFleetArrObj[key].setPosition(trackFleetArrObjPosition[key]);
                            })
                            // mapSet.setHeading(320);
                            // mapSet.setTilt(90)
                            // mapSet.setMapId('f899731c7a1d19be';)
                            
                            // mapMarker.setMap(mapSet);
                            // mapMarker.setAnimation(google.maps.Animation.BOUNCE);//google.maps.Animation.BOUNCE,
                            
                            //if something has been filtered, let's use the new filtered array, or else use the trackFleetArray
                            
                            // trackFleetArr2.length?(trackFleetArr = trackFleetArr2):(trackFleetArr = trackFleetArr);
                            // console.log('--')
                            // console.log(trackFleetArr, trackFleetArr[0].getTitle());
                            //     trackFleetArr.forEach(trackMarker=>{
                                //         // if (trackMarker.stopDuty != true){
                                    //             alert('This is markerBool ', trackMarker.markerBool);
                                    //         if (trackMarker.markerBool != true){
                        //             trackMarker.setMap(mapSet);
                        //             trackMarker.setAnimation(google.maps.Animation.BOUNCE);//google.maps.Animation.BOUNCE,
                        //         }
                        //     })
                        
                        //blanking markers
                            mapMarkerArr.forEach(marker=>{
                                marker.setMap(null);
                            })
                            console.log('heatmap null...');
                            heatMap.setMap(null);
                            
                       // })
                 //   }
               // })
        
    })
    
    socket.on('stopDutyOn', (assetCode)=>{
        console.log('Here', trackFleetArr);
        // trackFleetArr.forEach((marker, i)=>{
            //    marker.setMap(null)
            // });
            // trackedAssetDivContGrab.removeChild(document.getElementById(assetCode));
            // posCoordsObj[posCoordsObj]
            console.log('This is classlist: ', document.getElementById(assetCode).classList);
            //trackedAssetDiv

            let pauseDiv = document.getElementById('pause');
            pauseDiv.classList.remove('dutyOn')
            pauseDiv.classList.add('stopOnDuty')
            pauseDiv.append(document.getElementById(assetCode));
            reDrawChart();

            delete posCoordsObj[assetCode]; 
                    // document.getElementById('move').append(moveDiv);



            // document.getElementById(assetCode).classList.remove('dutyOn');
            // document.getElementById(assetCode).classList.add('stopOnDuty');
            console.log('This is classlist2: ', document.getElementById(assetCode).classList);
            // document.getElementsByClassName('trackedAssetDiv')[0].classList;
            alert('Stopping in admin!');
            // trackFleetArr2 = trackFleetArr.filter((marker, i)=>{
                //    return marker.getTitle() != assetCode
                //         // marker.stopDuty = true;
                // })
                
                // console.log('Here2 ', trackFleetArr2);
                mapMarkerArr.forEach(marker=>{
                    marker.setMap(null)
                });
                
                // trackFleetArr2.forEach(marker=>{
                    //     marker.setMap(mapSet);
                    // })
                    
        trackFleetArr.forEach(marker=>{
            if (marker.getTitle() == assetCode && marker.markerBool == undefined){
                marker.setMap(null);
                marker.markerBool = true;
            };
        })
        
        // console.log(filteredMarker[0].getTitle());
        // console.log(filteredMarker[0].setMap(null));
        // alert('This is the length of trackFleetArr '+ trackFleetArr2.length);
        Notification.requestPermission().then(perm=>{
            if (perm === 'granted'){
                new Notification(`${assetCode} is off duty`);
            }
        })
    })
    
                
    let roomId = "<%-roomId%>";
    let getSubVar;
    let subCatGrab;
    let markerArr;
    let mapMarkerArr;
    let mapMarker;
    let mapSet;
    let heatMap;
    let heatMapArr2 = [];
    let trackFleetArr = [];
    let trackFleetArr2 = [];
    let trackFleetArrBool = true;
    let toggleHeatMapGrab;
    let trackFleetGrab;
    let videoLiveGrab =  document.getElementById('videoLive');
    let startLiveButGrab =  document.getElementById('startLiveBut');
    
    // alert(roomId);
    // socket.emit('join-room', roomId, 10 ); //2dabcb54-47c4-4999-88d1-b75650767c19

    let videoGrid = document.getElementById('video-grid');
    let myVideo = document.createElement('video');
    myVideo.muted= true;

    const peers = {};

    videoLiveGrab.addEventListener('click', ()=>{
        navigator.mediaDevices.getUserMedia({
            video:true,
            audio:true
        }).then(stream =>{
            addVideoStream(myVideo, stream);
            console.log('Then... add');
            // connectToNewUser
            // connectToNewUser(newUserId, stream)

            myPeer.on('call', call=>{
                console.log('Then... after')
                alert('Then After');
                call.answer(stream);
                const video = document.createElement('video');
                call.on('stream', userVideoStream=>{
                    alert('Receiving Stream...')
                    addVideoStream(video, userVideoStream);
                    alert('SEcond connect...?')
                })
            })
            socket.emit('ready');
            socket.on('user-joined', (newUserId, roomId) =>{
                console.log('User joined national ', newUserId);
                console.log('Twice?');
                console.log('RoomId joined: ', roomId)
                alert('Clients Joining soon');
                // videoLiveGrab.innerHTML = 'Joining...'
                // videoLiveGrab.style.color = 'yellow';
                console.log(videoLiveGrab);
                alert('Clients Joining');
                // startLiveButGrab.addEventListener('click', function(){
                    connectToNewUser(newUserId, stream)
                // });
            })
    
            socket.on('user-disconnected', (userId)=>{
            //    if (peers[userId]) peers[userId].close();
    
            })
        });

    })
    

    myPeer.on('open', id =>{
        console.log('This is userId now: ',id);
        console.log('MyPeer is open');

        //this userid is an object, having user property.
        // console.log('This is socket ', socket);
        socket.emit('join-room', '2dabcb54-47c4-4999-88d1-b75650767c19', {user:'admin', id}); //2dabcb54-47c4-4999-88d1-b75650767c19
    })

    socket.on('readyLight', (userId, roomId, numOfClients)=>{
                // alert('The admin is live');
                console.log('The admin is live in ', roomId);
                console.log('Number of clients in the room ')//io.sockets.adapter.rooms[roomId].length
                videoLiveGrab.style.backgroundColor = 'lime';
                videoLiveGrab.style.color = 'black';
                videoLiveGrab.style.backgroundColor = 'yellow';
                videoLiveGrab.innerHTML = `Joining...(${numOfClients})`
                // videoLiveGrab.innerHTML = `Video Live(${numOfClients})`;
            });


    function connectToNewUser(newUserId, stream){
        console.log('Calling... ', newUserId)
        const call = myPeer.call(newUserId, stream); //send your video
        const video = document.createElement('video');
        call.on('stream', userVideoStream=>{ //receive their video
            startLiveButGrab.disabled = false;
            

            console.log('Receiving from...', newUserId);
            // startLiveButGrab.addEventListener('click', function(){
                addVideoStream(video, userVideoStream);
            // });
        })
        call.on('close', ()=>{
            video.remove();
        })

        peers[newUserId] = call;

    }

    function addVideoStream(video, stream){
        video.srcObject = stream;
        video.addEventListener('loadedmetadata', ()=>{
            video.play();
            videoGrid.append(video);
        })
    }

    
    let mapAllGrab;
    function initMap(){
        mapAllGrab = document.getElementById('mapAll');
        toggleHeatMapGrab = document.getElementById('toggle-heatmap');
        
        //toggling the heatmap
        toggleHeatMapGrab.addEventListener('click', function(){
            if (heatMap.getMap() !== null){
                console.log('Toggling...');
                heatMap.setMap(null)
            }else{
                    console.log('Toggling2...');
                    heatMap.setMap(mapSet)
                }
            })
            mapSet = new google.maps.Map(document.getElementById('nationalMap'), {zoom:18, center:{lat:9, lng:7},tilt:90, heading:320, mapId:'f899731c7a1d19be'});
            console.log(mapSet);
           
            
            let getVar = new XMLHttpRequest();
            getSubVar = new XMLHttpRequest();
            var catGrab = document.getElementById('cat');

                catGrab.addEventListener('change', function(){     
                    categoryOptions(this);
                });

                mapAllGrab.addEventListener('click', function(){
                    categoryOptions(catGrab); //first call
                });

                console.log('//')
                console.log(catGrab);
                
            
            markerArr = [];
            mapMarkerArr = [];
            
            trackFleetGrab = document.getElementById('trackFleet');
            trackFleetGrab.addEventListener('click', trackFleetNow);
            
            categoryOptions(catGrab); //first call

            function categoryOptions(this2){
                    //clearing markers
                    alert('Calling...')
                        trackFleetArr.forEach(marker=>{
                            marker.setMap(null);
                        })

                if (heatMap){
                    console.log('passing through');
                    heatMap.setMap(null);
                }
                alert('Here')
                getVar.onreadystatechange = function(){

                    //Clearing map if any markers
                    if (mapMarkerArr)
                    mapMarkerArr.forEach(marker=>{
                            marker.setMap(null);
                    })
                    

                    
                    if(getVar.readyState == 4 && getVar.status == 200){ 
                        heatMapArr = []; //for the heatmap
                        markerArr = [];
                        mapMarkerArr = [];
                        // userArr = []
                        anyArr = []
                    console.log(getVar.response);
                    let responseObj = JSON.parse(getVar.response);
                    // console.log(responseObj[48].geoCoord);
                    responseObj.resp.forEach(item=>{
                        console.log(item);
                        item.geoCoord? anyArr.push(item.firstName):anyArr.push(item.assetCode);
                        markerArr.push(item.geoCoord?item.geoCoord:item.assetLocationHistory[0].geoCoord); //first option is for user, second for asset, because of differences in their object structure
                        console.log(item.geoCoord?item.geoCoord:item.assetLocationHistory[0].geoCoord);
                        objCoord = item.geoCoord?item.geoCoord:item.assetLocationHistory[0].geoCoord
                        heatMapArr.push(new google.maps.LatLng(objCoord.lat, objCoord.lng));//item.geoCoord?item.geoCoord:+item.assetLocationHistory[0].geoCoord));
                    });

                    console.log('This is heat map Arr', heatMapArr);

                    markerArr.forEach((marker,i)=>{
                        let mapMarker = new google.maps.Marker({
                            position: {lat:+marker['lat'], lng:+marker['lng']},
                            map:mapSet,
                            title: `${anyArr[i]}`,
                            draggable:true
                        });
                        mapMarkerArr.push(mapMarker);
                    })

                        heatMap = new google.maps.visualization.HeatmapLayer({
                        data:heatMapArr,
                        dissipating:false,
                        radius:1,
                        opacity:0.9
                    });
                    heatMap.setMap(mapSet);
                    console.log('Setting heatmap', heatMapArr);
                    console.log('--')
                    console.log(heatMap)
                    
                    populateSubCatSel(responseObj.category)
                }
                    
                }

                getVar.open("GET", this2.value, true);
                getVar.send()
            }

            function populateSubCatSel(categoryArr){
                subCatGrab = document.getElementById('subCat');
                    while (subCatGrab.options.length){
                        subCatGrab.remove(0);
                    }

                categoryArr.forEach((category, i)=>{
                    subCatGrab.options[i] = new Option(category);
                    subCatGrab.options[i].value = `${catGrab.value}/${category}`;
                })
            }

            async function trackFleetNow(){
                trackFleetArr.forEach(marker=>{
                    alert('Clearing marker'+ marker.getTitle())
                    marker.setMap(null)
                })
                //if something has been filtered, let's use the new filtered array, or else use the trackFleetArray
                
                trackFleetArr2.length?(trackFleetArr = trackFleetArr2):(trackFleetArr = trackFleetArr);
                console.log('--')
                // console.log(trackFleetArr, trackFleetArr[0].getTitle());
                    trackFleetArr.forEach(trackMarker=>{
                        // if (trackMarker.stopDuty != true){
                            alert('This is markerBool ', trackMarker.markerBool);
                        if (trackMarker.markerBool != true){
                            trackMarker.setMap(mapSet);
                            trackMarker.setAnimation(google.maps.Animation.BOUNCE);//google.maps.Animation.BOUNCE,
                        }
                    })

                    //blanking markers
                    mapMarkerArr.forEach(marker=>{
                        marker.setMap(null);
                    })
                    console.log('This too?')
                    heatMap.setMap(null);
                
            }


            function TrackFleetNowFollow(){
                alert('Inside TrackFleetNowFollow')
                trackFleetArr.forEach(marker=>{
                    alert('Clearing marker'+ marker.getTitle())
                    marker.setMap(null)
                })
                //if something has been filtered, let's use the new filtered array, or else use the trackFleetArray
                
                trackFleetArr2.length?(trackFleetArr = trackFleetArr2):(trackFleetArr = trackFleetArr);
                console.log('--')
                console.log(trackFleetArr, trackFleetArr[0].getTitle());
                    trackFleetArr.forEach(trackMarker=>{
                        // if (trackMarker.stopDuty != true){
                            alert('This is markerBool ', trackMarker.markerBool);
                        if (trackMarker.markerBool != true){
                            trackMarker.setMap(mapSet);
                            trackMarker.setAnimation(google.maps.Animation.BOUNCE);//google.maps.Animation.BOUNCE,
                        }
                    })

                    //blanking markers
                    mapMarkerArr.forEach(marker=>{
                        marker.setMap(null);
                    })
                    console.log('This too2')
                    heatMap.setMap(null);
                
            }

            

    //   function initMap(){
        alert('Loaded Visualization')
      }

      function subCategoryOptions(){

        heatMapArr2 = [];
                getSubVar.onreadystatechange = function(){

                    //Clearing map if any markers
                    mapMarkerArr.forEach(marker=>{
                            marker.setMap(null);
                    })

                    trackFleetArr.forEach(marker=>{
                        marker.setMap(null)
                    })
                    

                    markerArr = [];
                    mapMarkerArr = [];
                    anyArr = []

                    if(getSubVar.readyState == 4 && getSubVar.status == 200){ 
                    console.log(getSubVar.response);
                    console.log('break here');
                    let responseObj = JSON.parse(getSubVar.response);
                    responseObj.forEach(item=>{
                        console.log(item);
                        item.geoCoord? anyArr.push(item.firstName):anyArr.push(item.assetCode);
                        let objCoord = item.geoCoord?item.geoCoord:item.assetLocationHistory[0].geoCoord
                        heatMapArr2.push(new google.maps.LatLng(objCoord.lat, objCoord.lng));//item.geoCoord?item.geoCoord:+item
                        markerArr.push(item.geoCoord?item.geoCoord:item.assetLocationHistory[0].geoCoord); //first option is for user, second for asset, because of differences in their object structure
                    });

                    markerArr.forEach((marker,i)=>{
                        let mapMarker = new google.maps.Marker({
                            position: {lat:+marker['lat'], lng:+marker['lng']},
                            map:mapSet,
                            title: `${anyArr[i]}`,
                            draggable:true
                        });
                        mapMarkerArr.push(mapMarker);
                    })
                    
                    console.log(heatMap);
                    heatMap.setMap(null);

                    //
                    console.log('**');
                    console.log(heatMapArr2);
                    heatMap.setData(heatMapArr2);

                    heatMap.setMap(mapSet);
                    console.log('Yah')
                }
                    
                }

                getSubVar.open("GET", subCatGrab.value, true);
                getSubVar.send()
            }

    
    const ctx = document.getElementById('myChart');
    let chart;
    
    function reDrawChart(){
        alert('Drawing...');
          let chartObj = {
              move:document.getElementById('move').children.length,
              pause:document.getElementById('pause').children.length,
              noMove:document.getElementById('noMove').children.length
          }
        
        if (chart){
            chart.destroy();
        }
    chart = new Chart(ctx, {
      type: 'bar',
      data: {
        labels: Object.keys(chartObj),
        datasets: [{
          label: 'Nos.',
          data: Object.values(chartObj),
          borderWidth: 1
        }]
      },
      options: {
        scales: {
          y: {
            beginAtZero: true
          }
        }
      }
    });
}
reDrawChart();
  </script>
</body>
</html>

