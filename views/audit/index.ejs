   
    <h4>Welcome, <%= userName %> </h4>
    <div class=<%=msgClass%>>
        <p><%=msg%></p>
    </div>

    <%console.log('This is date: ',Date.now())%>
    <%console.log('This is date: ',new Date(Date.now()))%>
    
   Audit  <a href="/audit">Audit Live</a> <a href= "/audGoLive/<%=roomId%>" target="_blank">Send Link</a>
    <div id="searchContDiv">
        <div id="searchContDivForm">
            <form method="get" action="/audGoLive/<%=roomId%>">
                
                <p><input type="number" name = "userDays" value = <%=searchParams.userDays%>></p>
                <p><input type="text" name = "userNameSearch" value = <%=searchParams.userNameSearch%>></p>
                <p><input type="date" name = "userDateBeforeSearch" value = <%=searchParams.userDateBeforeSearch%>></p>
                <p><input type="date" name = "userDateAfterSearch" id = 'userDateAfterSearch' value = <%=searchParams.userDateAfterSearch%>></p>
                <p><select name="userState" id="userState" value = <%=searchParams.userState%>>
                    <%if (distinctState){%>
                        <option value ="" selected>None</option>
                        <%distinctState.forEach(userState=>{%>
                            <option value= '<%=userState%>' <%= (searchParams.userState == userState)?'selected':''%>  ><%=userState%></option>
                            <%})%>
                            <%}%>
                        </select></p>
                        <p><select name="userDirectorate" id="userDirectorate" value = <%=searchParams.userDirectorate%>>
                    <%if (distinctDirectorate){%>
                        <option value ="">None</option>
                        <%distinctDirectorate.forEach(userDirectorate=>{%>
                            <option value= <%=userDirectorate%> <%= (searchParams.userDirectorate == userDirectorate)?'selected':''%>><%=userDirectorate%></option>
                        <%})%>
                    <%}%>
                </select></p>
                <p><select name="userRank" id="userRank" value = <%=searchParams.userRank%>>
                    <%if (distinctRank){%>
                        <option value ="">None</option>
                        <%distinctRank.forEach(userRank=>{%>
                            <option value= <%=userRank%> <%=(searchParams.userRank == userRank)?'selected':''%>><%=userRank%></option>
                        <%})%>
                    <%}%>
                </select></p>
                    Asset Created Before: <button id="expand-audit"> v </button>
                <div id="asset-audit-div">
                    <p><input type="date" name = "assetDateBeforeSearch" id = 'assetDateBeforeSearch' value = <%=searchParams.assetDateBeforeSearch%>></p>
                    <p><select name="assetList" id="assetList" value = <%=searchParams.assetList%>>
                        <option value ="" selected>None</option>
                        <%distinctAuditAssets.forEach(auditAsset=>{%>
                           <%= console.log('Audit asset', auditAsset.assetType.assetTypeClass)%>
                            <option value="<%= auditAsset.assetType.id%>" <%=(searchParams.assetList == auditAsset.assetType.id)?'selected':''%>><%= auditAsset.assetType.assetTypeClass%></option>
                            <%}) %>
                        </select></p>
                        
                        <p><select name="assetManufacturer" id="assetManufacturer" value = <%=searchParams.assetManufacturer%>>
                            <option value ="" selected>None</option>
                            <%distinctAssetManufacturer.forEach(manufacturer=>{%>
                                <option value="<%=manufacturer%>" <%=(searchParams.assetManufacturer == manufacturer)?'selected':''%>><%=manufacturer%></option>
                            <%})%>
                        </select></p>
                        <p><select name="assetTypeLifeCycle" id="assetTypeLifeCycle" value = <%=searchParams.assetTypeLifeCycle%>>
                            <option value ="" selected>None</option>
                            <%distinctAssetLifeCycle.forEach(lifeCycle=>{%>
                                <option value="<%=lifeCycle%>" <%=(searchParams.assetTypeLifeCycle == lifeCycle)?'selected':''%>><%=lifeCycle%></option>
                            <%})%>
                        </select></p>
                    <p><input type="date" name = "assetDatePurchased" id = 'assetDatePurchased' value = <%=searchParams.assetDatePurchased%>></p>
                    
                    <p><input type="date" name = "testing" value = <%=Date.now().toString%>></p>
                </div>
                <p><select name="userApprovalRole">
                    <option value = "All">All</option>
                    <%if (userApprovalRoles){%>
                        <%userApprovalRoles.forEach(userRole=>{%>
                            <%console.log('Here are option, ', userRole);%>
                            <option value= <%=userRole%> <%=searchParams.userApprovalRole == userRole ? "Selected":"" %>><%=userRole%></option>
                        <%})%>
                    <%}%>
                </select></p>
                <button value="submit">Submit</button>
                <button id="openSettings">Settings</button>
                <!-- <a href="/getAuditSettings">Settings</a> -->
                <!-- <a href="/getAssetTypes">Settings</a> -->
                <div>
                    <input name='searchScope' type="checkbox" <%=searchParams.searchScope?"checked": ""%> />Own Accounts
                </div>
            </form>
            <button id="openSettings2" onclick="openSettings2Now()">Submit2</button>
        </div>
    <div class="formSettings">
        <!-- forEach -->
        <%if (locals.distinctAuditAssets){%>
            <button id = 'cancelSettings'>X</button>
            <%distinctAuditAssets.forEach(assetAuditVersion=>{%>
                <!-- <form action="/auditSettingsCorrect?_method=PUT" method="post"> -->
                    <div id = "settingsDivCont">
                        <div id = "settingsDiv">
                            
                        </div> 
                    </div>
                <!-- </form> -->
            <%})%>
        <%}%>
    </div>
    </div>


    <div>
        <div class = 'tab2'>
            <%if (auditors){%>
                <!-- Stats btn -->
                    <button class="tablinks" onclick="openList(event, 'auditorAssignment')">Stats</button>
                <!-- Other btns -->
                <%auditors.forEach(auditor=>{%>
                    <!-- The buttons -->
                    <button class="tablinks" onclick="openList(event, '<%=auditor._id%>')"><%=auditor.firstName%></button>
                <%})%>
                    <!-- the divs -->
                    <!-- Stats div -->
                    <div id = 'auditorAssignment' class = 'tabcontent2 auditorAssignment'>
                        <%if (auditors){%>
                            Auditors
                            <select name="auditorAssignSel" id="auditorAssignSel">
                                <%auditors.forEach(auditor=>{%>
                                    <div>
                                        <%=auditor.firstName%>  
                                      </div>
                                    <option value="<%=auditor._id%>"><%=auditor.firstName%></option>
                                <%})%>
                            </select>
                        <%}%>
                        <button id="assignAuditor" onclick="assignAuditor()">Assign</button>
                        <button id="reAssignAuditor" onclick="reAssignAuditor(event.target)" disabled>Re-Assign</button>
                        <canvas id = 'auditorChart'>
                        </canvas>
                    </div>
                    <!-- other divs -->
                <%auditors.forEach(auditor=>{%>
                    <div id="<%=auditor._id%>" class="tabcontent2">
                        <p>
                            <h3>Assigned Audit List</h3>
                            <button onclick="refreshAuditAssigns()">Refresh</button>
                        </p>
                            <%auditor.userRole.auditAssigns.forEach(assignAuditObj=>{%>
                                 <div class = 'auditAssignDiv'>
                                    <div class = "auditAssignString">
                                        <%=JSON.stringify(assignAuditObj)%>
                                    </div>
                                    <div class="auditAssignObjActions">
                                       <button onclick="DeleteAssignedAudit(event.currentTarget)">Delete</button>
                                       <button onclick="ReAssignAudit(event.currentTarget)">ReAssign</button>
                                       <button class='loadAudit' onclick = "LoadAssignAudit(event.currentTarget)">Load</button>
                                       <span class = 'numberOfAudits'>(Nos)</span>
                                    </div>
                                </div>
                            <%})%>
                        <p><%=auditor.userRole.auditAssigns[0]%></p>
    
                    </div>
                <%})%> //
            <%}%>
        </div>
    </div>

    
    <h2>List of Profiles:</h2>
    <div id = 'alternativeAuditDiv' class="alternativeAuditDiv"></div>
    <form action="">
        <div>
            Snapshot
            <br/>
            <label>Status: </label><label class="savedStatus">Not Saved</label> 
            <input type="text" id='fName' name='fName' placeholder="filename"> <label id='dateLabel' for="fName"></label>
            <input type="button" id = 'saveSnapShot' value = 'Save'>
            <input type="button" id = 'viewSavedSnapShot' value = 'View Saves'>
        </div>
        <div id="viewSavedSnapsContainer" class="hideViewSavedSnapShot">

        </div>
    </form>
    <% if (locals.users !=null){ %>
        <%console.log('Here we go')%>
        <%= 'There are users' %>
        <%console.log('This is users, ', users)%>
        <%let userIdKeyArr = Object.keys(users)%>
        <%userIdKeyArr.forEach(userId=>{%>
            <% if (users[userId].userObj.length){%>
            <%console.log('firstname is: ', users[userId].firstName)%>;
            <div class="user-div">

                <div class="user-name"><%=users[userId].firstName%></div>
                <a href="/user/<%= userId%>">
                    <p><img width="120" height= "auto" src="<%= users[userId].userProfilePic%>" alt="<%= users[userId].userProfilePic%>"></p>
                </a>
                <%  users[userId].userObj.forEach(user=>{%>
                    <ul>
                        <li>
                            <div>
                               <% console.log('Does id have assetCode? ', user.id? user.id.assetCode:"")%>
                               <%console.log('locationAudit: ',users[userId].locationAudit)%>
                                <a href="/asset/<%= user.id._id %>"><%=user.id._id%></a><button id="viewAuditBut" value="<%=user.id._id%>" onclick = '(function (){viewAuditTrail("<%=user.id._id%>", true)})()'>|View Audit Trail</button>|<div><a href = '/videoAudit/<%=userId%>/<%=user.id._id%>/<%=user.id.assetCode%>/<%=JSON.stringify(users[userId].locationAudit)%>'>Video Audit</a></div>
                                <div id="<%=user.id._id%>" class="auditTrailDiv" data-toggleAuditTrailbool = "true"></div>
                            </div>
                            <form action="/auditStatus?_method=PUT" method="post">
                                <select name = 'auditStatus'>
                                    <option>functional</option>
                                    <option>nonFunctional</option>
                                    <option>retired</option>
                                </select>
                                <input name = 'assetId' type="hidden" value="<%=user.id._id%>">
                                <input name = 'userId' type="hidden" value="<%=userId%>">
                                <input name = 'auditorId' type="hidden" value="<%=reqUser._id%>">
                                <Button type= 'submit'>Audit</Button>
                            </form>

                        </li>
                    </ul>
                    <%})%>
                    
                    <div class="user-row">
                        <div class = "div-btn-row">
                            <p>
                                <a class= "btn btn-primary" href="/user/<%= userId %>">View</a>
                                <a class= "btn btn-primary" href="/user/<%= userId %>/edit">Edit</a>
                                <%-include('../partials/deleteForm.ejs', {url:`/user/${userId}`}) %>
                            </p>
                            
                        </div>
                    </div>
                </div>
                <%}%>
                    <%})%>
    <%}%> 
                    
                    
                    <div class="assetList">Assign</div>
                </div>

                
<div class="video-grid" id="video-grid"></div>





<!-- Charting -->
<div>
    <canvas id="myChart"></canvas>
</div>



<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://unpkg.com/peerjs@1.4.7/dist/peerjs.min.js"></script>
<script src="/socket.io/socket.io.js"></script>
<script>
    
    let reAssignedDOMDiv; //for temporarily holding div to be reassinged
let users = '<%- JSON.stringify(users) %>';
let usersObj = JSON.parse(users);
console.log('Number of audits: ', usersObj);

// let lengthOfAudits = usersObj.userObj.length;
// console.log('Length of Audits ', lengthOfAudits);
console.log('Keys ', Object.keys(usersObj));
// let totalAudit = 0; //counter for number of audits
let totalAuditCounter2 = 0;// used for alternative submit -with fetch

// Object.keys(usersObj).forEach(userId=>{
//     totalAudit =+ usersObj(userId).userObj.length;
// })
// Object.values(usersObj).forEach(val=>{
//     totalAudit =+ val.userObj.length
// });
// console.log('Total Audit: ', totalAudit);
    

function openList(evt, cityName, reAssignedDiv) {
  // Declare all variables
  console.log('This is reAssignedDiv: ', reAssignedDiv)
   reAssignedDOMDiv = reAssignedDiv;
  alert('Opening...')
  var i, tabcontent, tablinks;

  // Get all elements with class="tabcontent" and hide them
  tabcontent = document.getElementsByClassName("tabcontent2");
  for (i = 0; i < tabcontent.length; i++) {
    tabcontent[i].style.display = "none";
  }

  // Get all elements with class="tablinks" and remove the class "active"
  tablinks = document.getElementsByClassName("tablinks");
  for (i = 0; i < tablinks.length; i++) {
    tablinks[i].className = tablinks[i].className.replace(" active", "");
  }

  // Show the current tab, and add an "active" class to the button that opened the tab
  document.getElementById(cityName).style.display = "block";
  evt.currentTarget.className += " active";
}

    async function assignAuditor(){
        alert('Assign to Auditor');
        let assignObj = {
            genId:crypto.randomUUID(),
            userState:userStateGrab.value,
            userDirectorate:userDirectorateGrab.value,
            userRank:userRankGrab.value,
            assignedUser:auditorAssignSelGrab.value,
            assignedBy:reqUserObj._id
        }

            console.log('This is obj to assign: ', assignObj);
        // checkIfAssignExists(assignObj);
        let  returnaddToTabValue = await addToTab(assignObj);

        if ( returnaddToTabValue == true){
            alert ('addToTab'+ returnaddToTabValue);
            //Do nothing
        }else{
            //update database
            alert('returnaddToTabValue: '+ returnaddToTabValue)
            let auditOptionsObj = await fetch(`/assignAuditor/${JSON.stringify(assignObj)}`);
            
                        console.log(auditOptionsObj);
                        let objOptions = await auditOptionsObj.json();
                        console.log('Back from server: ',objOptions); 
                        alert('Re-charting...')
                        if (auditChart){
                            auditChart.destroy();
                        }
                       auditChart = new Chart(ctx2, {
                            type: 'bar',
                            data: {
                                labels: Object.keys(objOptions),
                                datasets: [{
                                label: '# of Votes',
                                data: Object.values(objOptions),
                                borderWidth: 1
                                }]
                            },
                            options: {
                                scales: {
                                y: {
                                    beginAtZero: true
                                }
                                }
                            }
                            });
        }
    }

    async function addToTab(obj){ //cosmetic addition to the auditor tab; though it has been stored on the server
        console.log('Adding to tab: ', JSON.stringify(obj));
        let retVal =  checkIfAssignExists2(obj);

        console.log('retVal: ', await retVal)
        console.log('retVal: ', await retVal[0]);

        let existsVal = await retVal;

        console.log('existsVal: ', existsVal);

        if (await existsVal[0]){
            alert('This audit is already assigned! (' +existsVal[1]+')');
            return await existsVal[0]; //returncheckIfAssignExistsValue; //true
        }else{
            alert('Nope'+retVal[0]);
            let auditActionsDiv = document.createElement('div');
            auditActionsDiv.setAttribute('class', 'auditAssignObjActions');
            let auditActionDelete = document.createElement('button');
                auditActionDelete.innerHTML = 'Delete';
            let auditActionReAssign = document.createElement('button');
                auditActionReAssign.innerHTML = 'ReAssign';
            let auditActionLoad = document.createElement('button');
                auditActionReAssign.innerHTML = 'Load';
            auditActionsDiv.appendChild(auditActionDelete);
            auditActionsDiv.appendChild(auditActionReAssign);
            auditActionsDiv.appendChild(auditActionLoad);
            
            let auditDiv = document.createElement('div');
                auditDiv.setAttribute('class', 'auditAssignDiv');
            let auditAssignStringDiv = document.createElement('div');
                auditAssignStringDiv.setAttribute('class', 'auditAssignString');
                auditAssignStringDiv.innerHTML = JSON.stringify(obj);
                auditDiv.appendChild(auditAssignStringDiv);
                auditDiv.appendChild(auditActionsDiv);
            document.getElementById(obj.assignedUser).appendChild(auditDiv);

            // return 1
        }
        // <div class="auditAssignObjActions">
        //                                <button>Delete</button>
        //                                <button>ReAssign</button>
        //                             </div>
    }

    function checkIfAssignExists(obj){
        let auditAssignStringGrab = document.getElementsByClassName('auditAssignString');
        alert(auditAssignStringGrab.length);
        let auditAssignStringGrabMap = [ ...auditAssignStringGrab].map(div=>{
            return div.innerText.trim();
        })

        console.log('This is auditAssignStringGrabMap: ', auditAssignStringGrabMap)

        if (auditAssignStringGrabMap.indexOf(JSON.stringify(obj)) != -1){
            console.log('index of assigned: ', auditAssignStringGrabMap.indexOf(JSON.stringify(obj)));
            prompt('You have assigned this before');
            return 0;
        }else {
            console.log('index of assigned2: ', auditAssignStringGrabMap.indexOf(JSON.stringify(obj) != -1));
            console.log(JSON.stringify(obj));
            console.log('Assigned...');
        }
    }
   async function checkIfAssignExists2(obj){
        let auditOptionsObj = await fetch(`/checkIfAssignExists/${JSON.stringify(obj)}`);
            
                        console.log(auditOptionsObj);
                        let objOptions = await auditOptionsObj.json();
                        console.log('This is auditExists: ', objOptions);
                        console.log('This is auditExists2: ', objOptions.auditObjExists.length);
        alert (await objOptions.auditObjExists.length > 0);
         return ([await objOptions.auditObjExists.length > 0, (objOptions.auditObjExists.length)? await objOptions.auditObjExists[0].assignedUser:'No User']);
    }

    async function DeleteAssignedAudit(e){
        alert('Deleting...');
        console.log('This is this: ', this)
        console.log(e);
        console.log(e.parentNode.parentNode);

        console.log(e.parentNode.parentNode.getElementsByClassName('auditAssignString')[0].innerHTML);
        let objString = e.parentNode.parentNode.getElementsByClassName('auditAssignString')[0].innerHTML;
        e.parentNode.parentNode.parentNode.removeChild(e.parentNode.parentNode);

        let auditOptionsObj = await fetch(`/deleteAuditAssign/${objString}`);
                    console.log(auditOptionsObj);
                    let objOptions = await auditOptionsObj.json();
                    console.log(objOptions); 
    }


    function ReAssignAudit(e){
        alert('ReAssigning...');
        console.log(e.parentNode.parentNode);
        openList(event, 'auditorAssignment', e.parentNode.parentNode);
        console.log(reAssignAuditorGrab);
        reAssignAuditorGrab.disabled = false;
    }
    
    async function reAssignAuditor(e){
        console.log('Div to be reassigned: ', reAssignedDOMDiv);
        // openList(event, auditorAssignSelGrab.value, reAssignedDOMDiv);
        openList(event, 'auditorAssignment', reAssignedDOMDiv)
        document.getElementById(auditorAssignSelGrab.value).appendChild(reAssignedDOMDiv);

        //Now, to effect it on the server and database
        let auditOptionsObj = await fetch(`/reAssignAuditor/${reAssignedDOMDiv.getElementsByClassName('auditAssignString')[0].innerText}/${auditorAssignSelGrab.value}`);
                    console.log(auditOptionsObj);
                    let objOptions = await auditOptionsObj.json();
                    console.log('This should be newLength: ', objOptions); 

            if (auditChart){
                    auditChart.destroy();
                }
               auditChart = new Chart(ctx2, {
                    type: 'bar',
                    data: {
                        labels: Object.keys(objOptions),
                        datasets: [{
                        label: '# of Votes',
                        data: Object.values(objOptions),
                        borderWidth: 1
                        }]
                    },
                    options: {
                        scales: {
                        y: {
                            beginAtZero: true
                        }
                        }
                    }
                    });

        e.disabled = true;

        
    }

    function LoadAssignAudit(e, refreshVar){
        alert(refreshVar);
        alert('Loading...');

        //load to the Form
            let auditAssign = e.parentNode.parentNode.getElementsByClassName('auditAssignString')[0].innerText;
            let auditAssignObj = JSON.parse(auditAssign);
            userStateGrab.value = auditAssignObj.userState;
            userDirectorateGrab.value = auditAssignObj.userDirectorate;
            userRankGrab.value = auditAssignObj.userRank;

            genId = auditAssignObj.genId;
        // let numberOfAssignAudits = e.parentNode.parentNode.getElementsByClassName('numberOfAudits')[0];
        // numberOfAssignAudits.innerText = `(${totalAudit})`;
        
        //Fetch
            openSettings2Now(e);
    }


    //socket
    var socket = io('https://assetmanger.herokuapp.com/');
    const myPeer = new Peer(undefined, {
            host:'0.peerjs.com',
            port:'443'
    });
    socket.on('connect', function() {
            console.log('check 2', socket.connected);
    });
    socket.emit('adminMonitoringTracking', 'Fetching tracked...');
    socket.on('trackPlots', (msg)=>{
        console.log(msg);
    })


    let auditChart;
    let assetObj = '<%- JSON.stringify(assetObj) %>';
    let auditors = <%- JSON.stringify(auditors) %>;
    console.log('Here is auditors, ', auditors);
    assetObj = JSON.parse(assetObj);
    auditorsObj = auditors;//JSON.parse(auditors);
        let auditorObj = {}
        auditorsObj.forEach(auditor=>{
            // auditorObj[auditor._id] = 0;
            auditorObj[auditor.firstName] = 0;
        });

        auditorsObj.forEach(auditor=>{
            // auditorObj[auditor._id] = auditor.userRole.auditAssigns.length;
            auditorObj[auditor.firstName] = auditor.userRole.auditAssigns.length;
        });

    console.log('Audit Assigns: ', auditorsObj);
    console.log('Audit Assigns Obj: ', auditorObj);
    console.log('assetObj on client', assetObj);
    const ctx = document.getElementById('myChart');
    const ctx2 = document.getElementById('auditorChart');
  
    new Chart(ctx, {
      type: 'bar',
      data: {
        labels: Object.keys(assetObj),
        datasets: [{
          label: '# of Votes',
          data: Object.values(assetObj),
          borderWidth: 1
        }]
      },
      options: {
        scales: {
          y: {
            beginAtZero: true
          }
        }
      }
    });

    auditChart = new Chart(ctx2, {
      type: 'bar',
      data: {
        labels: Object.keys(auditorObj),
        datasets: [{
          label: '# of Votes',
          data: Object.values(auditorObj),
          borderWidth: 1
        }]
      },
      options: {
        scales: {
          y: {
            beginAtZero: true
          }
        }
      }
    });
  </script>
  <!-- End of Charting -->

<script>
    const Room_ID = "<%=roomId%>";
</script>
<!-- <script src="/socket.io/socket.io.js"></script> -->
<script defer>
    let genIdDone = '<%-genIdDone%>';
    if (genIdDone !='undefined'){ //the string
        console.log('This is genId: ', typeof(genIdDone));
        alert ('genIdDone')
    }
            let postObj; //will transfer to backend to produce assets to be audited, and will also transfer to videoaudit pagel to Mark as Done
            let genId;
            let reqUser = '<%- JSON.stringify(reqUser)%>';
            let reqUserObj = JSON.parse(reqUser);
            console.log('This is: ', reqUserObj);
            // let auditTrailDivGrab = document.getElementById('auditTrailDiv');
            let assetListGrab = document.getElementById('assetList');
            let auditorAssignSelGrab = document.getElementById('auditorAssignSel');
            let assignAuditorGrab = document.getElementById('assignAuditor');
            let settingsDivContGrab = document.getElementById('settingsDivCont');
            // let settingsDivGrab = document.getElementById('settingsDiv');
            // console.log('This is reqUser: ', reqUser);
            let userID = '<%- userEmail %>';
            let dateLabelGrab = document.getElementById('dateLabel');
                dateLabelGrab.innerHTML =  new Date(Date.now());
            let savedStatusGrab = document.getElementsByClassName('savedStatus')[0];
            let fNameGrab = document.getElementById('fName');
            let reloadCheck = '<%-reloadCheck%>';
            let formSettingsGrab = document.getElementsByClassName('formSettings')[0];
            let searchContDivGrab = document.getElementById('searchContDivForm');
            let formSettingsGrabBool = false;
            var openSettingsGrab = document.getElementById('openSettings');
            let cancelSettingsGrab = document.getElementById('cancelSettings');
            let viewAuditButGrab = document.querySelector('#viewAuditBut');
            let viewAuditButGrabBool = false;
            let userDirectorateGrab = document.getElementById('userDirectorate');
            let userRankGrab = document.getElementById('userRank');
            let userAssetListGrab =  document.getElementById('assetList');
            let userAssetManufacturerGrab =  document.getElementById('assetManufacturer');
            let assetTypeLifeCycleGrab = document.getElementById('assetTypeLifeCycle');

            //Dates
            let userDateAfterSearchGrab = document.getElementById('userDateAfterSearch');
            let assetDateBeforeSearchGrab = document.getElementById('assetDateBeforeSearch');
            let assetDatePurchasedGrab = document.getElementById('assetDatePurchased');
            let assetAuditDivGrab = document.getElementById('asset-audit-div')
            let expandAuditGrab =  document.getElementById('expand-audit');
            let expandAuditGrabBool = false;
            let saveSnapShotGrab = document.getElementById('saveSnapShot');
                saveSnapShotGrab.addEventListener('click', saveSnapShotFunc)
            let viewSavedSnapShotGrab = document.getElementById('viewSavedSnapShot');
                viewSavedSnapShotGrab.addEventListener('click', viewSavedSnapShotFunc);
            let viewSavedSnapShotFuncBool = true;
            let viewSavedSnapsGrab = document.getElementById('viewSavedSnapsContainer');
            let reAssignAuditorGrab = document.getElementById('reAssignAuditor');
            let alternativeAuditDivGrab = document.getElementById('alternativeAuditDiv');

            expandAuditGrab.addEventListener('click', function(e){
                e.preventDefault();
                if (expandAuditGrabBool){
                    assetAuditDivGrab.style.display = 'block';
                    expandAuditGrabBool = !expandAuditGrabBool;
                    this.innerHTML = 'V';
                }else{
                    assetAuditDivGrab.style.display = 'None';
                    expandAuditGrabBool = !expandAuditGrabBool;
                    this.innerHTML = '^';
                    
                }
            })
            
            //onchange
            let userStateGrab = document.getElementById('userState');
            userStateGrab.addEventListener('change', changeUserGrab);

            async function changeUserGrab(){
                alert(userStateGrab.value+'---------');
                let userObj = {
                    auditField:['state'],
                    auditValue:[userStateGrab.value]
                }
                let auditOptionsObj = await fetch(`/auditTrail2/${JSON.stringify(userObj)}`);
                    console.log(auditOptionsObj);
                    let objOptions = await auditOptionsObj.json();
                    console.log(objOptions); 

                    // updating with new values
                        while(userDirectorateGrab.options.length){
                            userDirectorateGrab.remove(0);
                        }
                        while(userRankGrab.options.length){
                            userRankGrab.remove(0);
                        }
                    
                    //updating select elements
                    objOptions.directorate.forEach((opt, i)=>{
                        userDirectorateGrab.options[i] = new Option(opt);
                    });
                        userDirectorateGrab.options[userDirectorateGrab.options.length] = new Option('None');
                        userDirectorateGrab.options[userDirectorateGrab.options.length -1].value = "";
                    
                    objOptions.rank.forEach((opt, i)=>{
                        userRankGrab.options[i] = new Option(opt);
                    });
                    userRankGrab.options[userRankGrab.options.length] = new Option('None');
                    userRankGrab.options[userRankGrab.options.length -1].value = "";
                    //changeDirectorateGrab();



                    // changeUserRank();
                    // changeAssetListGrab();

                    resetSaved();
            }
            console.log('This is userStateGrab:', userStateGrab);
            if(reloadCheck){
                alert('Entered reload');
                // changeUserGrab();
                // changeDirectorateGrab();
                // changeUserRank();
                // changeAssetListGrab();
            }else {
                alert(reloadCheck);
            }
            // userStateGrab.onchange();
            

            
            userDirectorateGrab.addEventListener('change', changeDirectorateGrab);
                async function changeDirectorateGrab(){
                alert(userDirectorateGrab.value+'Directorate');
                let userObj = {
                    auditField:['state','directorate'],
                    auditValue:[userStateGrab.value, userDirectorateGrab.value]
                }
                let auditOptionsObj = await fetch(`/auditTrail2/${JSON.stringify(userObj)}`);
                    console.log(auditOptionsObj);
                    let objOptions = await auditOptionsObj.json();
                    console.log(objOptions); 

                    // updating with new values
                        while(userRankGrab.options.length){
                            userRankGrab.remove(0);
                        }

                    objOptions.rank.forEach((opt, i)=>{
                        userRankGrab.options[i] = new Option(opt);
                    });
                    userRankGrab.options[userRankGrab.options.length] = new Option('None');
                    userRankGrab.options[userRankGrab.options.length -1].value = "";
                    changeUserRank();
                    // changeAssetListGrab()
                }

            userRankGrab.addEventListener('change', changeUserRank)
                async function changeUserRank(){
                    alert('Changing directorate...');
                    let userObj = {
                        auditField:['state', 'directorate', 'rank'],
                        auditValue:[userStateGrab.value, userDirectorateGrab.value, userRankGrab.value]
                    }
                    let auditOptionsObj = await fetch(`/auditTrail2/${JSON.stringify(userObj)}`);
                        console.log(auditOptionsObj);
                        let objOptions = await auditOptionsObj.json();
                        console.log(objOptions); 

                        // updating with new values
                        while(userAssetListGrab.options.length){
                            userAssetListGrab.remove(0);
                        }
                        
                        objOptions.assetListIdAudit.forEach((opt, i)=>{
                            userAssetListGrab.options[i] = new Option(objOptions.assetListNamesAudit[i]); //assetListNamesAudit
                            // userAssetListGrab.options[i].value = objOptions.assetListId[i].assetType._id.toString();
                            // userAssetListGrab.options[i].value = objOptions.assetListId[i];
                            userAssetListGrab.options[i].value = objOptions.assetListIdAudit[i];
                        });
                        userAssetListGrab.options[userAssetListGrab.options.length] = new Option('None');
                        userAssetListGrab.options[userAssetListGrab.options.length -1].value = "";

                        //changeAssetListGrab();
                }


            userAssetListGrab.addEventListener('change', changeAssetListGrab)
                async function changeAssetListGrab(){
                    // alert('Changing directorate...');
                    alert('This is the value'+userAssetListGrab.value);
                    let userObj = {
                        auditField:['_id'],
                        auditValue:[userAssetListGrab.value]
                    }
                    let auditOptionsObj = await fetch(`/auditTrail2-Asset/${JSON.stringify(userObj)}`);
                        console.log(auditOptionsObj);
                        let objOptions = await auditOptionsObj.json();
                        console.log(objOptions); 

                        //updating with new values
                        while(userAssetManufacturerGrab.options.length){
                            userAssetManufacturerGrab.remove(0);
                        }

                        objOptions.assetManufacturer.forEach((opt, i)=>{
                            userAssetManufacturerGrab.options[i] = new Option(opt);
                        });
                        
                        // update lifeCycle field too?
                        while(assetTypeLifeCycleGrab.options.length){
                            assetTypeLifeCycleGrab.remove(0);
                        }

                        objOptions.assetLifeCycle.forEach((opt, i)=>{
                            assetTypeLifeCycleGrab.options[i] = new Option(opt);
                        });
                        assetTypeLifeCycleGrab.options[assetTypeLifeCycleGrab.options.length] = new Option('None');
                        assetTypeLifeCycleGrab.options[assetTypeLifeCycleGrab.options.length -1].value = "";

                        // changeUserAssetManufacturerGrab();
                }

                function DateSet(){
                    // alert('Setting date');
                    var now = new Date();
                    var day = ("0" + now.getDate()).slice(-2);
                    var month = ("0" + (now.getMonth() + 1)).slice(-2);
                    var today = now.getFullYear() + "-" + (month) + "-" + (day);
                    // $('#SubmitDate').val(today);

                    userDateAfterSearchGrab.value = today;
                    assetDateBeforeSearchGrab.value = today;
                    assetDatePurchasedGrab.value = today;
                }

                DateSet();


                //

                // userAssetManufacturerGrab.addEventListener('change', changeUserAssetManufacturerGrab);
                // async function changeUserAssetManufacturerGrab(){
                //     // alert('Changing directorate...');
                //     let userObj = {
                //         auditField:['state', 'directorate', 'rank', 'assetList'],
                //         auditValue:[userStateGrab.value, userDirectorateGrab.value, userRankGrab.value, userAssetListGrab.value, userAssetManufacturerGrab.value]
                //     }
                //     let auditOptionsObj = await fetch(`/auditTrail2/${JSON.stringify(userObj)}`);
                //         console.log(auditOptionsObj);
                //         let objOptions = await auditOptionsObj.json();
                //         console.log(objOptions); 

                //         //updating with new values
                //         while(userAssetManufacturerGrab.options.length){
                //             userAssetManufacturerGrab.remove(0);
                //         }

                //         objOptions.assetManufacturer.forEach((opt, i)=>{
                //             userAssetManufacturerGrab.options[i] = new Option(opt);
                //         });
                //         userAssetManufacturerGrab.options[userAssetManufacturerGrab.options.length] = new Option('None');
                //         userAssetManufacturerGrab.options[userAssetManufacturerGrab.options.length -1].value = "";
                // }

            // viewAuditButGrab.addEventListener('click', viewAuditTrail);
             async function viewAuditTrail (id, bool){
                alert('Trailing...');
                alert(id);
                let auditTrailDivGrab = document.getElementById(id);
                alert (auditTrailDivGrab.getAttribute('data-toggleAuditTrailbool') +typeof(auditTrailDivGrab.getAttribute('data-toggleAuditTrailbool')));
                    if (auditTrailDivGrab.getAttribute('data-toggleAuditTrailbool') == 'true'){
                        let auditTrail = await fetch(`/auditTrail/${id}`);
                        console.log(auditTrail);
                        let auditTrailTx = await auditTrail.json();
                        console.log('This is it: ', auditTrailTx);
                        auditTrailTx[0].auditTrail.forEach(auditObj=>{
                        auditTrailDivGrab.innerHTML += '<div class= "auditItems">'+'id: '+auditObj._id + ' Audit status: '+auditObj.auditStatus +  ' Audited By: '+auditObj.auditedBy.userName + '<br/>'+ 'Audit Date: '+auditObj.auditDate[0] + '</div>';
                        console.log('Got here now');
                    })
                    auditTrailDivGrab.setAttribute('data-toggleAuditTrailbool', false);
                }else{
                    auditTrailDivGrab.innerHTML = "";
                    alert('Other');
                    alert (auditTrailDivGrab.getAttribute('data-toggleAuditTrailbool'));
                    auditTrailDivGrab.setAttribute('data-toggleAuditTrailbool', true);
                }
            };

            // openSettingsGrab.addEventListener('click', function(event){
            //     event.preventDefault();
            //     openSettings();
            // })

            openSettingsGrab.addEventListener('click', function(event){
                event.preventDefault();
                openSettings();
            })

            cancelSettingsGrab.addEventListener('click', function(){
                this.parentNode.classList.toggle('formSettingsDisplay');
                searchContDivGrab.classList.toggle('searchContDivSettings');

            })


            // alert(`In here ${userID}`);
            // var socket = io('http://localhost:3000');

            socket.on('connect', ()=>{
                alert(`you connected on ${socket.id}`);
            })

            // document.addEventListener('click', ()=>{
            //     socket.emit('clicka', 'Adeiza');
            //     // alert('');
            // })
            // socket.on('clickaBack', (msg)=>{
            //     console.log(msg)
            // })


            // window.addEventListener('load', ()=>{
                // socket.emit('clicka', 'Adeiza');
                
                socket.on('DirectorateApproval', (msgApproval)=>{
                    console.log('&&&&&', msgApproval)
                    socket.emit('join-room',  userID, 'NotificationRoom', async(msg)=>{
                        console.log('@@@@@Joined');
                        console.log(msg);
                        let perm = await Notification.requestPermission();
                        alert (perm)
                        if (perm === 'granted'){
                            new Notification(msg, {body:'Directorate Approval Granted Index'});
                        }
                    });
            })
            // });


            //

        var settingsObj = <%- JSON.stringify(uiSettings)%>
        console.log(settingsObj);
        console.log('Now here');
        var settingsObjKeys = (Object.keys(settingsObj));
        var settingsObjValues = (Object.values(settingsObj));
        settingsObjKeys.forEach(className=>{
            [ ...document.getElementsByClassName(className)].forEach(elm=>{
                elm.style.display = settingsObj[className];
            })
        })
        console.log(Object.values(settingsObj));
    // function openSettings(event){
    //     console.log('Calling...');
        
    //         formSettingsGrab.classList.toggle('formSettingsDisplay')
    //         searchContDivGrab.classList.toggle('searchContDivSettings');
    //         formSettingsGrabBool = true;
    // }
    async function openSettings(event){
       
        settingsDivContGrab.innerHTML = "";
        let settingsObj = await fetch(`/getAuditSettings`);
        console.log(settingsObj);
        let settingsOptions = await settingsObj.json();
        console.log(settingsOptions); 
        // let assetNameDiv;
        // let assetAuditIntervalDiv;
        // let buttonSettings;

        settingsOptions.forEach(assetTypeAudit=>{
            let settingsDivGrab = document.createElement('div');

            let assetNameDiv = document.createElement('input');
                assetNameDiv.setAttribute('name', 'assetName');
                assetNameDiv.setAttribute('value', assetTypeAudit.assetType.assetTypeClass);
                assetNameDiv.setAttribute('style', 'width:60%; padding:0');
                
                let assetAuditIntervalDiv = document.createElement('input');
                assetAuditIntervalDiv.setAttribute('name', 'assetAuditInterval');
                assetAuditIntervalDiv.setAttribute('id', assetTypeAudit.assetType.assetTypeClass);
                assetAuditIntervalDiv.setAttribute('type', 'number');
                assetAuditIntervalDiv.setAttribute('style', 'width:20%; padding:0');
                assetAuditIntervalDiv.setAttribute('value', assetTypeAudit.assetTypeAuditInterval);

           let buttonSettings =  document.createElement('button');
            buttonSettings.innerHTML = "Update";
                (function(assetIdName){
                    buttonSettings.addEventListener('click', function (){
                        console.log(assetIdName)
                        ChangeAssetTypeSettings({assetId:assetTypeAudit.assetType._id}, assetIdName);
                    })
                })(assetTypeAudit.assetType.assetTypeClass);
                settingsDivGrab.appendChild(assetNameDiv)
                settingsDivGrab.appendChild(assetAuditIntervalDiv)
                settingsDivGrab.appendChild(buttonSettings)

                settingsDivContGrab.appendChild(settingsDivGrab);

                formSettingsGrab.appendChild(settingsDivContGrab);
            })


            console.log(formSettingsGrab);






        console.log('Calling...');
        
                formSettingsGrab.classList.toggle('formSettingsDisplay')
                searchContDivGrab.classList.toggle('searchContDivSettings');
                // formSettingsGrabBool = true;
    }

    async function openSettings2Now(e){
        // alert('Alternative submit');
        // var auditsParentDiv;
        // var auditDiv;
        // var assetLink;
        totalAuditCounter2 = 0;

        let auditStatusArr = ['functional', 'nonFunctional', 'retired']

        postObj = {
            userState:userStateGrab.value,
            userDirectorate:userDirectorateGrab.value,
            userRank:userRankGrab.value,
            assetDateBeforeSearch:assetDateBeforeSearchGrab.value,
            assetList:assetListGrab.value,
            userAssetManufacturer:userAssetManufacturerGrab.value,
            assetTypeLifeCycle:assetTypeLifeCycleGrab.value,
            assetDatePurchased:assetDatePurchasedGrab.value
        }

        let getAudits = await fetch(`/getAudits/${JSON.stringify(postObj)}`);
        let getAuditsJson = await getAudits.json();
        console.log('This is fetch another option ', getAuditsJson);
        
        let parentDiv = document.createElement('div');
            parentDiv.setAttribute('class', 'auditParentDiv');
        Object.keys(getAuditsJson).forEach(userId=>{
            var auditsParentDiv = document.createElement('div');
            let userProfileImg = document.createElement('img');
                userProfileImg.setAttribute('src', getAuditsJson[userId].userProfilePic);
                userProfileImg.setAttribute('height', 'auto');
                userProfileImg.setAttribute('width', 120);
            let userName = document.createElement('p');
                userName.innerText = getAuditsJson[userId].firstName;
            parentDiv.appendChild(userProfileImg);
            parentDiv.appendChild(userName);

            totalAuditCounter2 += getAuditsJson[userId].userObj.length;
            getAuditsJson[userId].userObj.forEach(auditObj=>{
                var auditDiv = document.createElement('div');
                var assetLink = document.createElement('a');
                var auditTrailBut =  document.createElement('button');
                    auditTrailBut.innerHTML = 'View Audit Trail';
                    (function(){
                        console.log(auditObj.id._id);
                        auditTrailBut.addEventListener('click', function (){
                            viewAuditTrail(auditObj.id._id, true);
                        });
                    })(auditObj.id._id);

                    assetLink.innerHTML = auditObj.assetTypeId.assetTypeCode + ' | (' + auditObj.id._id + ')';
                    assetLink.setAttribute('href', `/asset/${auditObj.id._id}`);
                    auditDiv.appendChild(assetLink);
                    auditDiv.appendChild(auditTrailBut);
                    var auditTrailDiv = document.createElement('div');
                        auditTrailDiv.setAttribute('id', auditObj.id._id);
                        auditTrailDiv.setAttribute('data-toggleAuditTrailbool', true);
                        auditsParentDiv.appendChild(auditDiv);
                        auditsParentDiv.appendChild(auditTrailDiv);
                        
                        //the video Audit link
                        let videoAuditDiv = document.createElement('div');
                        let videoAuditLink = document.createElement('a');
                        videoAuditLink.innerHTML = 'Video Audit';
                        videoAuditLink.href = `/videoAudit/${userId}/${auditObj.id._id}/${auditObj.id.assetCode}/${JSON.stringify(getAuditsJson[userId].locationAudit)}/${genId}/${JSON.stringify(postObj)}`;
                        
                        videoAuditDiv.appendChild(videoAuditLink);
                        auditsParentDiv.appendChild(videoAuditDiv);


                        //the select
                        var selectAudit = document.createElement('select');
                        selectAudit.setAttribute('name', 'auditStatus');
                        auditStatusArr.forEach((arrItem,i)=>{
                            selectAudit.options[i] = new Option(arrItem);
                        })
                        auditsParentDiv.appendChild(selectAudit);
                        let auditBut = document.createElement('button');
                        auditBut.innerHTML = 'Audit';
                            auditBut.addEventListener('click', async function(){
                                let auditUpdateObj = {
                                    assetId:auditObj.id._id,
                                    auditStatus:selectAudit.value,
                                    userId,
                                    auditorId:reqUserObj._id
                                }
                                
                                let auditUpdate = await fetch(`/auditStatus2/${JSON.stringify(auditUpdateObj)}`);
                                let getAuditUpdate = await auditUpdate.json();
                                console.log('This is auditUpdate from another option ', getAuditUpdate);
                                
                            })
                            auditsParentDiv.appendChild(auditBut);
                            
            })
            parentDiv.appendChild(auditsParentDiv);
        })

        if (alternativeAuditDivGrab.children.length){
            alert(alternativeAuditDivGrab.children.length);
            console.log(alternativeAuditDivGrab.children)
            while(alternativeAuditDivGrab.children.length){
                console.log('Removing...')
                alternativeAuditDivGrab.children[0].remove();
            }
        }
        alternativeAuditDivGrab.appendChild(parentDiv);
        if (e){//if coming from loading audits
            alert('From event...');
            console.log(e)
            let numberOfAssignAudits = e.parentNode.parentNode.getElementsByClassName('numberOfAudits');
            numberOfAssignAudits[0].innerText = `(${totalAuditCounter2})`;
        }
    }

    async function saveSnapShotFunc(){
        alert('Saving...')
        let fNameObj = {
            'dateLabel':dateLabelGrab.value,
            'fName':fNameGrab.value,
            'savedObj':{
                'state':userStateGrab.value,
                'directorate':userDirectorateGrab.value,
                'rank':userRankGrab.value
            }
        }

        let saveFileOptionsObj = await fetch(`/saveFile/${JSON.stringify(fNameObj)}`);
        let saveFileOptions = await saveFileOptionsObj.json();
        console.log('This is saved option ', saveFileOptions);

        if (saveFileOptions.msg == 'saved'){
            alert('Adding green...');
            console.log(savedStatusGrab);
            savedStatusGrab.innerHTML = 'Saved';
            dateLabelGrab.classList.add('greenSaved');
            savedStatusGrab.classList.add('greenSaved');
            savedStatusGrab.classList.remove('redUnsaved');
            dateLabelGrab.classList.remove('redUnsaved');
        }

    }

    async function viewSavedSnapShotFunc(){
        if (viewSavedSnapShotFuncBool){
            // viewSavedSnapsGrab.style.display = 'none'
            let viewSavedSnapshotObj = await fetch(`/viewSavedSnapshots`);
            let viewSavedSnapshotOptions = await viewSavedSnapshotObj.json();
            console.log(viewSavedSnapshotOptions);
            viewSavedSnapshotOptions.forEach(savedItem=>{
                let savedItemDiv = document.createElement('div');
                    savedItemDiv.setAttribute('class', 'savedItemDiv')
                    savedItemDiv.setAttribute('data-savedItemId', savedItem._id);
                    savedItemDiv.addEventListener('click', loadSnapSave)
                        function loadSnapSave(){
                            console.log('Loading...');
                            alert(savedItem.savedObj.state);
                            userStateGrab.value = savedItem.savedObj.state;
                            userDirectorateGrab.value = savedItem.savedObj.directorate;
                            userRankGrab.value = savedItem.savedObj.rank;
                            changeAssetListGrab();
                        }
                
                let deleteSavedBtn = document.createElement('button');
                    deleteSavedBtn.setAttribute('type', 'button');
                    deleteSavedBtn.addEventListener('click', deleteSavedItem)
                    deleteSavedBtn.innerHTML = 'Delete';

                    // let deleteSavedBtn = document.createElement('input');
                    // //     deleteSavedBtn.addEventListener('click', deleteSavedItem)
                    // // deleteSavedBtn.innerHTML = 'Delete';
                    savedItemDiv.innerHTML = `${savedItem._id}<br/> Name:${savedItem.snapShotfileName}<br/>Saved Date:${savedItem.saveDate}<br/>Desc:${JSON.stringify(savedItem.savedObj)}`;
                    savedItemDiv.appendChild(deleteSavedBtn);
                viewSavedSnapsGrab.appendChild(savedItemDiv);
    
            })
            // viewSavedSnapsGrab.style.display = 'block'
            viewSavedSnapsGrab.classList.toggle('hideViewSavedSnapShot')//.display = 'block'
            viewSavedSnapShotFuncBool = !viewSavedSnapShotFuncBool
        }else {
            
            viewSavedSnapsGrab.innerHTML = "";
            viewSavedSnapsGrab.classList.toggle('hideViewSavedSnapShot')//.display = 'block'
            viewSavedSnapShotFuncBool = !viewSavedSnapShotFuncBool;
        }
        // alert('Daya..')
    }

    function resetSaved(){
        alert('resetting color...')
        //redUnsaved
        savedStatusGrab.classList.add('redUnsaved');// = 'Not Saved';
        savedStatusGrab.innerHTML = 'Not Saved';
        dateLabelGrab.classList.add('redUnsaved');
        // savedStatusGrab.style.color = 'red';
    }

    async function deleteSavedItem(){
        alert ('Deleting...');
        console.log('What do');
        console.log(this.parentNode);
        console.log(this.parentNode.getAttribute('data-savedItemId'))
            savedItemId = this.parentNode.getAttribute('data-savedItemId');
        let deletedSavedSnapshotObj = await fetch(`/deleteSavedSnapshots/${JSON.stringify({savedItemId})}`, {method:'DELETE'});
            let deleteSavedSnapshotOptions = await deletedSavedSnapshotObj.json();
            console.log(deleteSavedSnapshotOptions);
    }

   async function ChangeAssetTypeSettings(data = {}, id){
    alert(data.assetId); 
    alert(id); 
    console.log('Element', document.getElementById(id))
    console.log('Value', document.getElementById(id).value)
data.assetAuditInterval = document.getElementById(id).value;
    console.log(data);  
    data = JSON.stringify(data);
    // console.log(.getElementsByClassName('assetAuditInterval')[0]).value;
    // alert(data.assetAuditInterval);    
  // Default options are marked with *
        const response = await fetch(`/auditSettingsCorrect/${data}`, {
            method: "GET", // *GET, POST, PUT, DELETE, etc.
            // mode: "cors", // no-cors, *cors, same-origin
            // cache: "no-cache", // *default, no-cache, reload, force-cache, only-if-cached
            // credentials: "same-origin", // include, *same-origin, omit
            headers: {
            "Content-Type": "application/json",
            // 'Content-Type': 'application/x-www-form-urlencoded',
            },
            // redirect: "follow", // manual, *follow, error
            // referrerPolicy: "no-referrer", // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url
            // body: JSON.stringify(data), // body data type must match "Content-Type" header
        });

        if (response.ok){
            alert('Done')
        }
        return response.json(); // parses JSON response into native JavaScript objects
    }

    async function VideoAudit(assetCode){
        alert (assetCode);
        const response = await fetch(`/videoAudit/${assetCode}`);
        if (response.ok){
            alert('Video Audit in progress')
        }
        // let responseObj = response.json(); // parses JSON response into native JavaScript objects
        
    }

    function refreshAuditAssigns(){
        alert('refreshing...')
        let auditAssign = document.getElementsByClassName('auditAssignString')[0].innerText;

        let auditAssignObj = JSON.parse(auditAssign);
        console.log(auditAssignObj);
            // userStateGrab.value = auditAssignObj.userState;
            // userDirectorateGrab.value = auditAssignObj.userDirectorate;
            // userRankGrab.value = auditAssignObj.userRank;
    }

    




</script>
<script defer src="https://unpkg.com/peerjs@1.3.2/dist/peerjs.min.js"></script>
<script src="/script.js" defer></script>