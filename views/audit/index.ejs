   
    <h4>Welcomel, <%= userName %> </h4>
    <div class=<%=msgClass%>>
        <p><%=msg%></p>
    </div>

    <%console.log('This is date: ',Date.now())%>
    <%console.log('This is date: ',new Date(Date.now()))%>
    
   Audit  <a href="/audit">Audit Live</a> <a href= "/audGoLive/<%=roomId%>" target="_blank">Send Link</a>
    <div id="searchContDiv">
        <div id="searchContDivForm">
            <form method="get" action="/audGoLive">
                
                <p><input type="number" name = "userDays" value = <%=searchParams.userDays%>></p>
                <p><input type="text" name = "userNameSearch" value = <%=searchParams.userNameSearch%>></p>
                <p><input type="date" name = "userDateBeforeSearch" value = <%=searchParams.userDateBeforeSearch%>></p>
                <p><input type="date" name = "userDateAfterSearch" id = 'userDateAfterSearch' value = <%=searchParams.userDateAfterSearch%>></p>
                <p><select name="userState" id="userState" value = <%=searchParams.userState%>>
                    <%if (distinctState){%>
                        <option value ="" selected>None</option>
                        <%distinctState.forEach(userState=>{%>
                            <option value= <%=userState%> <%= (searchParams.userState == userState)?'selected':''%>  ><%=userState%></option>
                            <%})%>
                            <%}%>
                        </select></p>
                        <p><select name="userDirectorate" id="userDirectorate" value = <%=searchParams.userDirectorate%>>
                    <%if (distinctDirectorate){%>
                        <option value ="">None</option>
                        <%distinctDirectorate.forEach(userDirectorate=>{%>
                            <option value= <%=userDirectorate%> <%= (searchParams.userDirectorate == userDirectorate)?'selected':''%>><%=userDirectorate%></option>
                        <%})%>
                    <%}%>
                </select></p>
                <p><select name="userRank" id="userRank" value = <%=searchParams.userRank%>>
                    <%if (distinctRank){%>
                        <option value ="">None</option>
                        <%distinctRank.forEach(userRank=>{%>
                            <option value= <%=userRank%> <%=(searchParams.userRank == userRank)?'selected':''%>><%=userRank%></option>
                        <%})%>
                    <%}%>
                </select></p>
                    Asset Created Before: <button id="expand-audit"> v </button>
                <div id="asset-audit-div">
                    <p><input type="date" name = "assetDateBeforeSearch" id = 'assetDateBeforeSearch' value = <%=searchParams.assetDateBeforeSearch%>></p>
                    <p><select name="assetList" id="assetList" value = <%=searchParams.assetList%>>
                        <option value ="" selected>None</option>
                        <%distinctAuditAssets.forEach(auditAsset=>{%>
                           <%= console.log('Audit asset', auditAsset.assetType.assetTypeClass)%>
                            <option value="<%= auditAsset.assetType.id%>" <%=(searchParams.assetList == auditAsset.assetType.id)?'selected':''%>><%= auditAsset.assetType.assetTypeClass%></option>
                            <%}) %>
                        </select></p>
                        
                        <p><select name="assetManufacturer" id="assetManufacturer" value = <%=searchParams.assetManufacturer%>>
                            <option value ="" selected>None</option>
                            <%distinctAssetManufacturer.forEach(manufacturer=>{%>
                                <option value="<%=manufacturer%>" <%=(searchParams.assetManufacturer == manufacturer)?'selected':''%>><%=manufacturer%></option>
                            <%})%>
                        </select></p>
                        <p><select name="assetTypeLifeCycle" id="assetTypeLifeCycle" value = <%=searchParams.assetTypeLifeCycle%>>
                            <option value ="" selected>None</option>
                            <%distinctAssetLifeCycle.forEach(lifeCycle=>{%>
                                <option value="<%=lifeCycle%>" <%=(searchParams.assetTypeLifeCycle == lifeCycle)?'selected':''%>><%=lifeCycle%></option>
                            <%})%>
                        </select></p>
                    <p><input type="date" name = "assetDatePurchased" id = 'assetDatePurchased' value = <%=searchParams.assetDatePurchased%>></p>
                    
                    <p><input type="date" name = "testing" value = <%=Date.now().toString%>></p>
                </div>
                <p><select name="userApprovalRole">
                    <option value = "All">All</option>
                    <%if (userApprovalRoles){%>
                        <%userApprovalRoles.forEach(userRole=>{%>
                            <%console.log('Here are option, ', userRole);%>
                            <option value= <%=userRole%> <%=searchParams.userApprovalRole == userRole ? "Selected":"" %>><%=userRole%></option>
                        <%})%>
                    <%}%>
                </select></p>
                <button value="submit">Submit</button>
                <button id="openSettings">Settings</button>
                <!-- <a href="/getAssetTypes">Settings</a> -->
                <div>
                    <input name='searchScope' type="checkbox" <%=searchParams.searchScope?"checked": ""%> />Own Accounts
                </div>
            </form>
        </div>
    <div class="formSettings">
        <!-- forEach -->
        <%if (locals.distinctAuditAssets){%>
            <button id = 'cancelSettings'>X</button>
            <%distinctAuditAssets.forEach(assetAuditVersion=>{%>
                <form action="/auditSettingsCorrect?_method=PUT" method="post">
                    <div>
                    <input name = 'assetName' style='width:60%; padding:0' value="<%=assetAuditVersion.assetType.assetTypeClass%>"/> <input name = 'assetAuditInterval' style='width:20%; padding:0' type="number" value = "<%=assetAuditVersion.assetTypeAuditInterval%>" placeholder="Days"/><button type="submit">Submit</button>
                <input type="hidden" name="assetId" value="<%=assetAuditVersion._id%>"/>  
                </div> 
                </form>
            <%})%>
        <%}%>
    </div>
    </div>
    <h2>List of Profiles:</h2>
    <form action="">
        <div>
            Snapshot
            <br/>
            <label>Status: </label><label class="savedStatus">Not Saved</label> 
            <input type="text" id='fName' name='fName' placeholder="filename"> <label id='dateLabel' for="fName"></label>
            <input type="button" id = 'saveSnapShot' value = 'Save'>
            <input type="button" id = 'viewSavedSnapShot' value = 'View Saves'>
        </div>
        <div id="viewSavedSnapsContainer" class="hideViewSavedSnapShot">

        </div>
    </form>
    <% if (locals.users !=null){ %>
        <%console.log('Here we go')%>
        <%= 'There are users' %>
        <%console.log('This is users, ', users)%>
        <%let userIdKeyArr = Object.keys(users)%>
        <%userIdKeyArr.forEach(userId=>{%>
            <% if (users[userId].userObj.length){%>
            <%console.log('firstname is: ', users[userId].firstName)%>;
            <div class="user-div">

                <div class="user-name"><%=users[userId].firstName%></div>
                <a href="/user/<%= userId%>">
                    <p><img width="120" height= "auto" src="<%= users[userId].userProfilePic%>" alt="<%= users[userId].userProfilePic%>"></p>
                </a>
                <%  users[userId].userObj.forEach(user=>{%>
                    <ul>
                        <li>
                            <a href="/asset/<%= user.id %>"><%=user.id%></a><button id="viewAuditBut" value="<%=user.id%>">|View Audit Trail</button>
                            <div id="auditTrailDiv"></div>
                            <form action="/auditStatus?_method=PUT" method="post">
                                <select name = 'auditStatus'>
                                    <option>functional</option>
                                    <option>nonFunctional</option>
                                    <option>retired</option>
                                </select>
                                <input name = 'assetId' type="hidden" value="<%=user.id%>">
                                <input name = 'userId' type="hidden" value="<%=userId%>">
                                <input name = 'auditorId' type="hidden" value="<%=reqUser._id%>">
                                <Button type= 'submit'>Audit</Button>
                            </form>

                        </li>
                    </ul>
                    <%})%>
                    
                    <div class="user-row">
                        <div class = "div-btn-row">
                            <p>
                                <a class= "btn btn-primary" href="/user/<%= userId %>">View</a>
                                <a class= "btn btn-primary" href="/user/<%= userId %>/edit">Edit</a>
                                <%-include('../partials/deleteForm.ejs', {url:`/user/${userId}`}) %>
                            </p>
                            
                        </div>
                    </div>
                </div>
                <%}%>
                    <%})%>
    <%}%> 
                    
                    
                    <div class="assetList">Assign</div>
                </div>

                
<div class="video-grid" id="video-grid"></div>


<!-- Charting -->
<div>
    <canvas id="myChart"></canvas>
</div>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    let assetObj = <%- JSON.stringify(assetObj) %>;
    console.log('assetObj on client', assetObj);
    const ctx = document.getElementById('myChart');
  
    new Chart(ctx, {
      type: 'bar',
      data: {
        labels: Object.keys(assetObj),
        datasets: [{
          label: '# of Votes',
          data: Object.values(assetObj),
          borderWidth: 1
        }]
      },
      options: {
        scales: {
          y: {
            beginAtZero: true
          }
        }
      }
    });
  </script>
  <!-- End of Charting -->

<script>
    const Room_ID = "<%=roomId%>";
</script>
<script src="/socket.io/socket.io.js"></script>
<script defer>
            let userID = '<%- userEmail %>';
            let dateLabelGrab = document.getElementById('dateLabel');
                dateLabelGrab.innerHTML =  new Date(Date.now());
            let savedStatusGrab = document.getElementsByClassName('savedStatus')[0];
            let fNameGrab = document.getElementById('fName');
            let reloadCheck = '<%-reloadCheck%>';
            let formSettingsGrab = document.getElementsByClassName('formSettings')[0];
            let searchContDivGrab = document.getElementById('searchContDivForm');
            let formSettingsGrabBool = false;
            var openSettingsGrab = document.getElementById('openSettings');
            let cancelSettingsGrab = document.getElementById('cancelSettings');
            let viewAuditButGrab = document.querySelector('#viewAuditBut');
            let viewAuditButGrabBool = false;
            let userDirectorateGrab = document.getElementById('userDirectorate');
            let userRankGrab = document.getElementById('userRank');
            let userAssetListGrab =  document.getElementById('assetList');
            let userAssetManufacturerGrab =  document.getElementById('assetManufacturer');
            let assetTypeLifeCycleGrab = document.getElementById('assetTypeLifeCycle');

            //Dates
            let userDateAfterSearchGrab = document.getElementById('userDateAfterSearch');
            let assetDateBeforeSearchGrab = document.getElementById('assetDateBeforeSearch');
            let assetDatePurchasedGrab = document.getElementById('assetDatePurchased');
            let assetAuditDivGrab = document.getElementById('asset-audit-div')
            let expandAuditGrab =  document.getElementById('expand-audit');
            let expandAuditGrabBool = false;
            let saveSnapShotGrab = document.getElementById('saveSnapShot');
                saveSnapShotGrab.addEventListener('click', saveSnapShotFunc)
            let viewSavedSnapShotGrab = document.getElementById('viewSavedSnapShot');
                viewSavedSnapShotGrab.addEventListener('click', viewSavedSnapShotFunc);
            let viewSavedSnapShotFuncBool = true;
            let viewSavedSnapsGrab = document.getElementById('viewSavedSnapsContainer');

            expandAuditGrab.addEventListener('click', function(e){
                e.preventDefault();
                if (expandAuditGrabBool){
                    assetAuditDivGrab.style.display = 'block';
                    expandAuditGrabBool = !expandAuditGrabBool;
                    this.innerHTML = 'V';
                }else{
                    assetAuditDivGrab.style.display = 'None';
                    expandAuditGrabBool = !expandAuditGrabBool;
                    this.innerHTML = '^';
                    
                }
            })
            
            //onchange
            let userStateGrab = document.getElementById('userState');
            userStateGrab.addEventListener('change', changeUserGrab);

            async function changeUserGrab(){
                alert(userStateGrab.value+'---------');
                let userObj = {
                    auditField:['state'],
                    auditValue:[userStateGrab.value]
                }
                let auditOptionsObj = await fetch(`/auditTrail2/${JSON.stringify(userObj)}`);
                    console.log(auditOptionsObj);
                    let objOptions = await auditOptionsObj.json();
                    console.log(objOptions); 

                    // updating with new values
                        while(userDirectorateGrab.options.length){
                            userDirectorateGrab.remove(0);
                        }
                        while(userRankGrab.options.length){
                            userRankGrab.remove(0);
                        }
                    
                    //updating select elements
                    objOptions.directorate.forEach((opt, i)=>{
                        userDirectorateGrab.options[i] = new Option(opt);
                    });
                        userDirectorateGrab.options[userDirectorateGrab.options.length] = new Option('None');
                        userDirectorateGrab.options[userDirectorateGrab.options.length -1].value = "";
                    
                    objOptions.rank.forEach((opt, i)=>{
                        userRankGrab.options[i] = new Option(opt);
                    });
                    userRankGrab.options[userRankGrab.options.length] = new Option('None');
                    userRankGrab.options[userRankGrab.options.length -1].value = "";
                    changeDirectorateGrab();
                    // changeUserRank();
                    // changeAssetListGrab();

                    resetSaved();
            }
            console.log('This is userStateGrab:', userStateGrab);
            if(reloadCheck){
                alert('Entered reload');
                // changeUserGrab();
                // changeDirectorateGrab();
                // changeUserRank();
                // changeAssetListGrab();
            }else {
                alert(reloadCheck);
            }
            // userStateGrab.onchange();
            

            
            userDirectorateGrab.addEventListener('change', changeDirectorateGrab);
                async function changeDirectorateGrab(){
                alert(userDirectorateGrab.value+'Directorate');
                let userObj = {
                    auditField:['state','directorate'],
                    auditValue:[userStateGrab.value, userDirectorateGrab.value]
                }
                let auditOptionsObj = await fetch(`/auditTrail2/${JSON.stringify(userObj)}`);
                    console.log(auditOptionsObj);
                    let objOptions = await auditOptionsObj.json();
                    console.log(objOptions); 

                    // updating with new values
                        while(userRankGrab.options.length){
                            userRankGrab.remove(0);
                        }

                    objOptions.rank.forEach((opt, i)=>{
                        userRankGrab.options[i] = new Option(opt);
                    });
                    userRankGrab.options[userRankGrab.options.length] = new Option('None');
                    userRankGrab.options[userRankGrab.options.length -1].value = "";
                    changeUserRank();
                    // changeAssetListGrab()
                }

            userRankGrab.addEventListener('change', changeUserRank)
                async function changeUserRank(){
                    alert('Changing directorate...');
                    let userObj = {
                        auditField:['state', 'directorate', 'rank'],
                        auditValue:[userStateGrab.value, userDirectorateGrab.value, userRankGrab.value]
                    }
                    let auditOptionsObj = await fetch(`/auditTrail2/${JSON.stringify(userObj)}`);
                        console.log(auditOptionsObj);
                        let objOptions = await auditOptionsObj.json();
                        console.log(objOptions); 

                        // updating with new values
                        while(userAssetListGrab.options.length){
                            userAssetListGrab.remove(0);
                        }
                        
                        objOptions.assetListIdAudit.forEach((opt, i)=>{
                            userAssetListGrab.options[i] = new Option(objOptions.assetListNamesAudit[i]); //assetListNamesAudit
                            // userAssetListGrab.options[i].value = objOptions.assetListId[i].assetType._id.toString();
                            // userAssetListGrab.options[i].value = objOptions.assetListId[i];
                            userAssetListGrab.options[i].value = objOptions.assetListIdAudit[i];
                        });
                        userAssetListGrab.options[userAssetListGrab.options.length] = new Option('None');
                        userAssetListGrab.options[userAssetListGrab.options.length -1].value = "";

                        changeAssetListGrab();
                }


            userAssetListGrab.addEventListener('change', changeAssetListGrab)
                async function changeAssetListGrab(){
                    // alert('Changing directorate...');
                    alert('This is the value'+userAssetListGrab.value);
                    let userObj = {
                        auditField:['_id'],
                        auditValue:[userAssetListGrab.value]
                    }
                    let auditOptionsObj = await fetch(`/auditTrail2-Asset/${JSON.stringify(userObj)}`);
                        console.log(auditOptionsObj);
                        let objOptions = await auditOptionsObj.json();
                        console.log(objOptions); 

                        //updating with new values
                        while(userAssetManufacturerGrab.options.length){
                            userAssetManufacturerGrab.remove(0);
                        }

                        objOptions.assetManufacturer.forEach((opt, i)=>{
                            userAssetManufacturerGrab.options[i] = new Option(opt);
                        });
                        
                        // update lifeCycle field too?
                        while(assetTypeLifeCycleGrab.options.length){
                            assetTypeLifeCycleGrab.remove(0);
                        }

                        objOptions.assetLifeCycle.forEach((opt, i)=>{
                            assetTypeLifeCycleGrab.options[i] = new Option(opt);
                        });
                        assetTypeLifeCycleGrab.options[assetTypeLifeCycleGrab.options.length] = new Option('None');
                        assetTypeLifeCycleGrab.options[assetTypeLifeCycleGrab.options.length -1].value = "";

                        // changeUserAssetManufacturerGrab();
                }

                function DateSet(){
                    // alert('Setting date');
                    var now = new Date();
                    var day = ("0" + now.getDate()).slice(-2);
                    var month = ("0" + (now.getMonth() + 1)).slice(-2);
                    var today = now.getFullYear() + "-" + (month) + "-" + (day);
                    // $('#SubmitDate').val(today);

                    userDateAfterSearchGrab.value = today;
                    assetDateBeforeSearchGrab.value = today;
                    assetDatePurchasedGrab.value = today;
                }

                DateSet();


                //

                // userAssetManufacturerGrab.addEventListener('change', changeUserAssetManufacturerGrab);
                // async function changeUserAssetManufacturerGrab(){
                //     // alert('Changing directorate...');
                //     let userObj = {
                //         auditField:['state', 'directorate', 'rank', 'assetList'],
                //         auditValue:[userStateGrab.value, userDirectorateGrab.value, userRankGrab.value, userAssetListGrab.value, userAssetManufacturerGrab.value]
                //     }
                //     let auditOptionsObj = await fetch(`/auditTrail2/${JSON.stringify(userObj)}`);
                //         console.log(auditOptionsObj);
                //         let objOptions = await auditOptionsObj.json();
                //         console.log(objOptions); 

                //         //updating with new values
                //         while(userAssetManufacturerGrab.options.length){
                //             userAssetManufacturerGrab.remove(0);
                //         }

                //         objOptions.assetManufacturer.forEach((opt, i)=>{
                //             userAssetManufacturerGrab.options[i] = new Option(opt);
                //         });
                //         userAssetManufacturerGrab.options[userAssetManufacturerGrab.options.length] = new Option('None');
                //         userAssetManufacturerGrab.options[userAssetManufacturerGrab.options.length -1].value = "";
                // }

            viewAuditButGrab.addEventListener('click', async function (){
                alert('Trailing...');
                alert(viewAuditButGrabBool);
                if (!viewAuditButGrabBool){
                    let auditTrail = await fetch(`auditTrail/${this.value}`);
                    console.log(auditTrail);
                    let auditTrailTx = await auditTrail.json();
                    console.log('This is it: ', auditTrailTx);
                    auditTrailTx[0].auditTrail.forEach(auditObj=>{
                        // auditTrailDiv.innerHTML +=  'Id: '+auditObj._id + ' Audit status'+auditObj.auditStatus;
                        auditTrailDiv.innerHTML += '<div class= "auditItems">'+'id: '+auditObj._id + ' Audit status: '+auditObj.auditStatus +  ' Audited By: '+auditObj.auditedBy.userName + '<br/>'+ 'Audit Date: '+auditObj.auditDate[0] + '</div>';
                        console.log('Got here now');
                        console.log(auditTrailDiv);
                    })
                    viewAuditButGrabBool = !viewAuditButGrabBool;
                }else{
                    auditTrailDiv.innerHTML = "";
                    viewAuditButGrabBool = !viewAuditButGrabBool;
                }
            })

            openSettingsGrab.addEventListener('click', function(event){
                event.preventDefault();
                openSettings();
            })

            cancelSettingsGrab.addEventListener('click', function(){
                this.parentNode.classList.toggle('formSettingsDisplay');
                searchContDivGrab.classList.toggle('searchContDivSettings');

            })


            // alert(`In here ${userID}`);
            // var socket = io('http://localhost:3000');

            socket.on('connect', ()=>{
                alert(`you connected on ${socket.id}`);
            })

            // document.addEventListener('click', ()=>{
            //     socket.emit('clicka', 'Adeiza');
            //     // alert('');
            // })
            // socket.on('clickaBack', (msg)=>{
            //     console.log(msg)
            // })


            // window.addEventListener('load', ()=>{
                // socket.emit('clicka', 'Adeiza');
                
                socket.on('DirectorateApproval', (msgApproval)=>{
                    console.log('&&&&&', msgApproval)
                    socket.emit('join-room',  userID, 'NotificationRoom', async(msg)=>{
                        console.log('@@@@@Joined');
                        console.log(msg);
                        let perm = await Notification.requestPermission();
                        alert (perm)
                        if (perm === 'granted'){
                            new Notification(msg, {body:'Directorate Approval Granted Index'});
                        }
                    });
            })
            // });


            //

        var settingsObj = <%- JSON.stringify(uiSettings)%>
        console.log(settingsObj);
        console.log('Now here');
        var settingsObjKeys = (Object.keys(settingsObj));
        var settingsObjValues = (Object.values(settingsObj));
        settingsObjKeys.forEach(className=>{
            [ ...document.getElementsByClassName(className)].forEach(elm=>{
                elm.style.display = settingsObj[className];
            })
        })
        console.log(Object.values(settingsObj));
    function openSettings(event){
        console.log('Calling...');
        
            formSettingsGrab.classList.toggle('formSettingsDisplay')
            searchContDivGrab.classList.toggle('searchContDivSettings');
            formSettingsGrabBool = true;
    }

    async function saveSnapShotFunc(){
        alert('Saving...')
        let fNameObj = {
            'dateLabel':dateLabelGrab.value,
            'fName':fNameGrab.value,
            'savedObj':{
                'state':userStateGrab.value,
                'directorate':userDirectorateGrab.value,
                'rank':userRankGrab.value
            }
        }

        let saveFileOptionsObj = await fetch(`/saveFile/${JSON.stringify(fNameObj)}`);
        let saveFileOptions = await saveFileOptionsObj.json();
        console.log('This is saved option ', saveFileOptions);

        if (saveFileOptions.msg == 'saved'){
            alert('Adding green...');
            console.log(savedStatusGrab);
            savedStatusGrab.innerHTML = 'Saved';
            dateLabelGrab.classList.add('greenSaved');
            savedStatusGrab.classList.add('greenSaved');
            savedStatusGrab.classList.remove('redUnsaved');
            dateLabelGrab.classList.remove('redUnsaved');
        }

    }

    async function viewSavedSnapShotFunc(){
        if (viewSavedSnapShotFuncBool){
            // viewSavedSnapsGrab.style.display = 'none'
            let viewSavedSnapshotObj = await fetch(`/viewSavedSnapshots`);
            let viewSavedSnapshotOptions = await viewSavedSnapshotObj.json();
            console.log(viewSavedSnapshotOptions);
            viewSavedSnapshotOptions.forEach(savedItem=>{
                let savedItemDiv = document.createElement('div');
                    savedItemDiv.setAttribute('class', 'savedItemDiv')
                    savedItemDiv.setAttribute('data-savedItemId', savedItem._id);
                    savedItemDiv.addEventListener('click', loadSnapSave)
                        function loadSnapSave(){
                            console.log('Loading...');
                            alert(savedItem.savedObj.state);
                            userStateGrab.value = savedItem.savedObj.state;
                            userDirectorateGrab.value = savedItem.savedObj.directorate;
                            userRankGrab.value = savedItem.savedObj.rank;
                            changeAssetListGrab();
                        }
                
                let deleteSavedBtn = document.createElement('button');
                    deleteSavedBtn.setAttribute('type', 'button');
                    deleteSavedBtn.addEventListener('click', deleteSavedItem)
                    deleteSavedBtn.innerHTML = 'Delete';

                    // let deleteSavedBtn = document.createElement('input');
                    // //     deleteSavedBtn.addEventListener('click', deleteSavedItem)
                    // // deleteSavedBtn.innerHTML = 'Delete';
                    savedItemDiv.innerHTML = `${savedItem._id}<br/> Name:${savedItem.snapShotfileName}<br/>Saved Date:${savedItem.saveDate}<br/>Desc:${JSON.stringify(savedItem.savedObj)}`;
                    savedItemDiv.appendChild(deleteSavedBtn);
                viewSavedSnapsGrab.appendChild(savedItemDiv);
    
            })
            // viewSavedSnapsGrab.style.display = 'block'
            viewSavedSnapsGrab.classList.toggle('hideViewSavedSnapShot')//.display = 'block'
            viewSavedSnapShotFuncBool = !viewSavedSnapShotFuncBool
        }else {
            
            viewSavedSnapsGrab.innerHTML = "";
            viewSavedSnapsGrab.classList.toggle('hideViewSavedSnapShot')//.display = 'block'
            viewSavedSnapShotFuncBool = !viewSavedSnapShotFuncBool;
        }
        // alert('Daya..')
    }

    function resetSaved(){
        alert('resetting color...')
        //redUnsaved
        savedStatusGrab.classList.add('redUnsaved');// = 'Not Saved';
        savedStatusGrab.innerHTML = 'Not Saved';
        dateLabelGrab.classList.add('redUnsaved');
        // savedStatusGrab.style.color = 'red';
    }

    async function deleteSavedItem(){
        alert ('Deleting...');
        console.log('What do');
        console.log(this.parentNode);
        console.log(this.parentNode.getAttribute('data-savedItemId'))
            savedItemId = this.parentNode.getAttribute('data-savedItemId');
        let deletedSavedSnapshotObj = await fetch(`/deleteSavedSnapshots/${JSON.stringify({savedItemId})}`, {method:'DELETE'});
            let deleteSavedSnapshotOptions = await deletedSavedSnapshotObj.json();
            console.log(deleteSavedSnapshotOptions);
    }

</script>
<script defer src="https://unpkg.com/peerjs@1.3.2/dist/peerjs.min.js"></script>
<script src="/socket.io/socket.io.js" defer></script>
<script src="/script.js" defer></script>